/**
 * Mini Visualizations - Server Component
 * Small, fast charts for glanceable insights
 */

import {
  getPeriodLoadPerDay,
  getRoomOccupancy,
} from "@/lib/public/stats";
import { getTopTeachersByUtilization } from "@/lib/public/teachers";
import {
  TeacherUtilizationChart,
  PeriodLoadChart,
  RoomOccupancyGrid,
} from "./Charts";

export async function MiniCharts() {
  const [periodLoad, roomOccupancy, topTeachers] = await Promise.all([
    getPeriodLoadPerDay(),
    getRoomOccupancy(),
    getTopTeachersByUtilization(5),
  ]);

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      {/* Teacher Utilization */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          ครูที่มีภาระสอนสูงสุด (Top 5)
        </h3>
        <div className="space-y-3">
          {topTeachers.map((teacher, index) => (
            <div key={teacher.teacherId}>
              <div className="flex items-center justify-between text-sm mb-1">
                <span
                  className="text-gray-700 truncate max-w-[150px]"
                  title={teacher.name}
                >
                  {teacher.name}
                </span>
                <span className="font-semibold text-gray-900">
                  {teacher.utilization}%
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div
                  className={`h-2 rounded-full transition-all ${
                    teacher.utilization > 80
                      ? "bg-red-500"
                      : teacher.utilization > 60
                        ? "bg-orange-500"
                        : "bg-green-500"
                  }`}
                  style={{ width: `${teacher.utilization}%` }}
                  role="progressbar"
                  aria-valuenow={teacher.utilization}
                  aria-valuemin={0}
                  aria-valuemax={100}
                  aria-label={`${teacher.name} utilization`}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Period Load Sparkline */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          จำนวนคาบเรียนต่อวัน
        </h3>
        <ResponsiveContainer width="100%" height={160}>
          <AreaChart
            data={periodLoad}
            margin={{ top: 5, right: 5, left: -20, bottom: 5 }}
          >
            <defs>
              <linearGradient id="colorPeriods" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="#3b82f6" stopOpacity={0.8} />
                <stop offset="95%" stopColor="#3b82f6" stopOpacity={0} />
              </linearGradient>
            </defs>
            <XAxis
              dataKey="day"
              tick={{ fontSize: 12 }}
              axisLine={{ stroke: "#e5e7eb" }}
            />
            <YAxis tick={{ fontSize: 12 }} axisLine={{ stroke: "#e5e7eb" }} />
            <Tooltip
              contentStyle={{
                backgroundColor: "#fff",
                border: "1px solid #e5e7eb",
                borderRadius: "8px",
              }}
            />
            <Area
              type="monotone"
              dataKey="periods"
              stroke="#3b82f6"
              fillOpacity={1}
              fill="url(#colorPeriods)"
            />
          </AreaChart>
        </ResponsiveContainer>
      </div>

      {/* Room Occupancy Mini Heatmap */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          อัตราการใช้ห้องเรียน (%)
        </h3>
        <div className="grid grid-cols-5 gap-1">
          {roomOccupancy.slice(0, 40).map((cell, index) => {
            const color =
              cell.occupancyPercent > 80
                ? "bg-red-500"
                : cell.occupancyPercent > 60
                  ? "bg-orange-400"
                  : cell.occupancyPercent > 40
                    ? "bg-yellow-400"
                    : cell.occupancyPercent > 20
                      ? "bg-green-400"
                      : "bg-gray-200";

            return (
              <div
                key={index}
                className={`${color} aspect-square rounded-sm`}
                title={`${cell.day} Period ${cell.period}: ${cell.occupancyPercent}%`}
                role="img"
                aria-label={`Room occupancy ${cell.occupancyPercent} percent`}
              ></div>
            );
          })}
        </div>
        <div className="mt-3 flex items-center justify-between text-xs text-gray-600">
          <span>ต่ำ</span>
          <span>สูง</span>
        </div>
      </div>
    </div>
  );
}

/**
 * Loading skeleton for charts
 */
export function MiniChartsSkeleton() {
  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      {[...Array(3)].map((_, i) => (
        <div
          key={i}
          className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 animate-pulse"
        >
          <div className="h-5 bg-gray-200 rounded w-40 mb-4"></div>
          <div className="h-40 bg-gray-100 rounded"></div>
        </div>
      ))}
    </div>
  );
}
