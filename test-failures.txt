
> school-timetable@2.0.0 test B:\Dev\school-timetable-senior-project
> jest "--verbose"

FAIL __test__/features/lock/lock-template.service.test.ts
  Lock Template Service
    resolveTemplate
      โ should resolve lunch-junior template correctly (49 ms)
      โ should resolve lunch-senior template correctly (3 ms)
      โ should resolve activity-morning template for all grades (2 ms)
      โ should resolve activity-club template with multiple periods (5 ms)
      โ should generate warning when room not found (1 ms)
      ร— should generate error when subject not found (6 ms)
      ร— should generate warning when no responsibility found (1 ms)
      ร— should generate error when no matching timeslots (1 ms)
      โ should generate error when no matching grades (1 ms)
      โ should calculate correct Cartesian product (1 ms)
    validateTemplate
      ร— should validate template with all required data (4 ms)
      ร— should invalidate when missing subject (1 ms)
      ร— should invalidate when no matching grades (1 ms)
      ร— should invalidate when no matching timeslots (1 ms)
    getTemplateSummary
      ร— should generate correct summary for lunch-junior template (2 ms)
      ร— should generate correct summary for activity-club template (1 ms)
      ร— should show zero counts when no matches (2 ms)
    Template Models
      โ should have all 9 predefined templates (3 ms)
      โ should have proper category assignments (2 ms)
      โ should have required fields in all templates (40 ms)
    Edge Cases
      ร— should handle template with allDay timeslot filter (2 ms)
      โ should handle template with null roomId (1 ms)
      ร— should handle multiple periods in timeslot filter (2 ms)

  โ— Lock Template Service โ€บ resolveTemplate โ€บ should generate error when subject not found

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      163 |       const result = resolveTemplate(createTestInput(template, { availableSubjects: emptySubjects }));
      164 |
    > 165 |       expect(result.errors.some((e) => e.includes("เธงเธดเธเธฒ"))).toBe(true);
          |                                                             ^
      166 |     });
      167 |
      168 |     it("should generate warning when no responsibility found", () => {

      at Object.toBe (__test__/features/lock/lock-template.service.test.ts:165:61)

  โ— Lock Template Service โ€บ resolveTemplate โ€บ should generate warning when no responsibility found

    TypeError: Cannot read properties of undefined (reading 'filter')

      67 |   switch (config.gradeFilter.type) {
      68 |     case 'junior':
    > 69 |       targetGrades = availableGrades.filter(g => g.Level >= 1 && g.Level <= 3);
         |                                      ^
      70 |       break;
      71 |     case 'senior':
      72 |       targetGrades = availableGrades.filter(g => g.Level >= 4 && g.Level <= 6);

      at filter (src/features/lock/domain/services/lock-template.service.ts:69:38)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:172:37)

  โ— Lock Template Service โ€บ resolveTemplate โ€บ should generate error when no matching timeslots

    TypeError: Cannot read properties of undefined (reading 'filter')

      67 |   switch (config.gradeFilter.type) {
      68 |     case 'junior':
    > 69 |       targetGrades = availableGrades.filter(g => g.Level >= 1 && g.Level <= 3);
         |                                      ^
      70 |       break;
      71 |     case 'senior':
      72 |       targetGrades = availableGrades.filter(g => g.Level >= 4 && g.Level <= 6);

      at filter (src/features/lock/domain/services/lock-template.service.ts:69:38)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:190:37)

  โ— Lock Template Service โ€บ validateTemplate โ€บ should validate template with all required data

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      238 |       const result = validateTemplate(createTestInput(template));
      239 |
    > 240 |       expect(result.isValid).toBe(true);
          |                              ^
      241 |       expect(result.errors.length).toBe(0);
      242 |     });
      243 |

      at Object.toBe (__test__/features/lock/lock-template.service.test.ts:240:30)

  โ— Lock Template Service โ€บ validateTemplate โ€บ should invalidate when missing subject

    TypeError: Cannot read properties of undefined (reading 'filter')

      67 |   switch (config.gradeFilter.type) {
      68 |     case 'junior':
    > 69 |       targetGrades = availableGrades.filter(g => g.Level >= 1 && g.Level <= 3);
         |                                      ^
      70 |       break;
      71 |     case 'senior':
      72 |       targetGrades = availableGrades.filter(g => g.Level >= 4 && g.Level <= 6);

      at filter (src/features/lock/domain/services/lock-template.service.ts:69:38)
      at resolveTemplate (src/features/lock/domain/services/lock-template.service.ts:168:29)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:247:38)

  โ— Lock Template Service โ€บ validateTemplate โ€บ should invalidate when no matching grades

    TypeError: Cannot read properties of undefined (reading 'filter')

      67 |   switch (config.gradeFilter.type) {
      68 |     case 'junior':
    > 69 |       targetGrades = availableGrades.filter(g => g.Level >= 1 && g.Level <= 3);
         |                                      ^
      70 |       break;
      71 |     case 'senior':
      72 |       targetGrades = availableGrades.filter(g => g.Level >= 4 && g.Level <= 6);

      at filter (src/features/lock/domain/services/lock-template.service.ts:69:38)
      at resolveTemplate (src/features/lock/domain/services/lock-template.service.ts:168:29)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:263:38)

  โ— Lock Template Service โ€บ validateTemplate โ€บ should invalidate when no matching timeslots

    TypeError: Cannot read properties of undefined (reading 'filter')

      67 |   switch (config.gradeFilter.type) {
      68 |     case 'junior':
    > 69 |       targetGrades = availableGrades.filter(g => g.Level >= 1 && g.Level <= 3);
         |                                      ^
      70 |       break;
      71 |     case 'senior':
      72 |       targetGrades = availableGrades.filter(g => g.Level >= 4 && g.Level <= 6);

      at filter (src/features/lock/domain/services/lock-template.service.ts:69:38)
      at resolveTemplate (src/features/lock/domain/services/lock-template.service.ts:168:29)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:278:38)

  โ— Lock Template Service โ€บ getTemplateSummary โ€บ should generate correct summary for lunch-junior template

    TypeError: Cannot read properties of undefined (reading 'filter')

      67 |   switch (config.gradeFilter.type) {
      68 |     case 'junior':
    > 69 |       targetGrades = availableGrades.filter(g => g.Level >= 1 && g.Level <= 3);
         |                                      ^
      70 |       break;
      71 |     case 'senior':
      72 |       targetGrades = availableGrades.filter(g => g.Level >= 4 && g.Level <= 6);

      at filter (src/features/lock/domain/services/lock-template.service.ts:69:38)
      at resolveTemplate (src/features/lock/domain/services/lock-template.service.ts:186:21)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:295:41)

  โ— Lock Template Service โ€บ getTemplateSummary โ€บ should generate correct summary for activity-club template

    TypeError: Cannot read properties of undefined (reading 'length')

      82 |   }
      83 |
    > 84 |   if (targetGrades.length === 0) {
         |                    ^
      85 |     errors.push('เนเธกเนเธเธเธเธฑเนเธเน€เธฃเธตเธขเธเธ—เธตเนเธ•เธฃเธเธเธฑเธเน€เธเธ“เธ‘เน');
      86 |     return { locks, warnings, errors };
      87 |   }

      at length (src/features/lock/domain/services/lock-template.service.ts:84:20)
      at resolveTemplate (src/features/lock/domain/services/lock-template.service.ts:186:21)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:311:41)

  โ— Lock Template Service โ€บ getTemplateSummary โ€บ should show zero counts when no matches

    TypeError: Cannot read properties of undefined (reading 'filter')

      67 |   switch (config.gradeFilter.type) {
      68 |     case 'junior':
    > 69 |       targetGrades = availableGrades.filter(g => g.Level >= 1 && g.Level <= 3);
         |                                      ^
      70 |       break;
      71 |     case 'senior':
      72 |       targetGrades = availableGrades.filter(g => g.Level >= 4 && g.Level <= 6);

      at filter (src/features/lock/domain/services/lock-template.service.ts:69:38)
      at resolveTemplate (src/features/lock/domain/services/lock-template.service.ts:186:21)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:325:41)

  โ— Lock Template Service โ€บ Edge Cases โ€บ should handle template with allDay timeslot filter

    TypeError: Cannot read properties of undefined (reading 'length')

      82 |   }
      83 |
    > 84 |   if (targetGrades.length === 0) {
         |                    ^
      85 |     errors.push('เนเธกเนเธเธเธเธฑเนเธเน€เธฃเธตเธขเธเธ—เธตเนเธ•เธฃเธเธเธฑเธเน€เธเธ“เธ‘เน');
      86 |     return { locks, warnings, errors };
      87 |   }

      at length (src/features/lock/domain/services/lock-template.service.ts:84:20)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:392:37)

  โ— Lock Template Service โ€บ Edge Cases โ€บ should handle multiple periods in timeslot filter

    TypeError: Cannot read properties of undefined (reading 'length')

      82 |   }
      83 |
    > 84 |   if (targetGrades.length === 0) {
         |                    ^
      85 |     errors.push('เนเธกเนเธเธเธเธฑเนเธเน€เธฃเธตเธขเธเธ—เธตเนเธ•เธฃเธเธเธฑเธเน€เธเธ“เธ‘เน');
      86 |     return { locks, warnings, errors };
      87 |   }

      at length (src/features/lock/domain/services/lock-template.service.ts:84:20)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:418:37)

FAIL __test__/public-data-layer.test.ts (5.054 s)
  Public Teachers Data Layer
    โ should not expose email addresses (PII protection) (197 ms)
    โ should return valid teacher data structure (28 ms)
    โ should calculate utilization correctly (11 ms)
    โ should handle pagination correctly (45 ms)
    โ should sort by utilization correctly (45 ms)
    โ getTopTeachersByUtilization should return top N teachers (14 ms)
    โ should filter by search term (15 ms)
  Public Classes Data Layer
    โ should not expose individual student data (6 ms)
    โ should return valid class data structure (6 ms)
    โ should handle pagination correctly (20 ms)
  Public Stats Data Layer
    ร— getQuickStats should return valid metrics (398 ms)
    ร— getPeriodLoadPerDay should return data for all weekdays (49 ms)
    ร— getRoomOccupancy should return valid occupancy data (26 ms)
  Security & Privacy
    โ no PII in any public data endpoints (44 ms)

  โ— Public Stats Data Layer โ€บ getQuickStats should return valid metrics

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      190 |     expect(stats).toHaveProperty("currentTerm");
      191 |     
    > 192 |     expect(stats.totalTeachers).toBeGreaterThan(0);
          |                                 ^
      193 |     expect(stats.totalClasses).toBeGreaterThan(0);
      194 |     expect(stats.totalRooms).toBeGreaterThan(0);
      195 |     expect(stats.periodsPerDay).toBeGreaterThan(0);

      at Object.toBeGreaterThan (__test__/public-data-layer.test.ts:192:33)

  โ— Public Stats Data Layer โ€บ getPeriodLoadPerDay should return data for all weekdays

    expect(received).toBe(expected) // Object.is equality

    Expected: 5
    Received: 0

      201 |     
      202 |     // Should have data for MON-FRI (5 days)
    > 203 |     expect(periodLoad.length).toBe(5);
          |                               ^
      204 |     
      205 |     const expectedDays = ["MON", "TUE", "WED", "THU", "FRI"];
      206 |     const actualDays = periodLoad.map(d => d.day);

      at Object.toBe (__test__/public-data-layer.test.ts:203:31)

  โ— Public Stats Data Layer โ€บ getRoomOccupancy should return valid occupancy data

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      220 |     
      221 |     // Should have data (at least one timeslot)
    > 222 |     expect(occupancy.length).toBeGreaterThan(0);
          |                              ^
      223 |     
      224 |     occupancy.forEach((item) => {
      225 |       expect(item).toHaveProperty("day");

      at Object.toBeGreaterThan (__test__/public-data-layer.test.ts:222:30)

FAIL __test__/integration/seed-endpoint.integration.test.ts (5.293 s)
  Seed Semesters API (Integration)
    โ should require authentication (322 ms)
    ร— should create semesters when authenticated (82 ms)
    ร— should be idempotent (can run multiple times) (160 ms)
    ร— should seed multiple years (166 ms)
    ร— should seed timeslots and config when seedData=true (139 ms)
    ร— should default to years 2567,2568 if not specified (83 ms)
    ร— should validate ConfigID format (SEMESTER-YEAR) (355 ms)
    ร— should handle GET and POST methods identically (336 ms)

  โ— Seed Semesters API (Integration) โ€บ should create semesters when authenticated

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      47 |     const data = await response.json();
      48 |
    > 49 |     expect(response.status).toBe(200);
         |                             ^
      50 |     expect(data.ok).toBe(true);
      51 |     expect(data.results).toBeDefined();
      52 |     expect(data.results.length).toBe(2); // 2 semesters (1 & 2) for 1 year

      at Object.toBe (__test__/integration/seed-endpoint.integration.test.ts:49:29)

  โ— Seed Semesters API (Integration) โ€บ should be idempotent (can run multiple times)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      77 |     const data2 = await response2.json();
      78 |
    > 79 |     expect(response1.status).toBe(200);
         |                              ^
      80 |     expect(response2.status).toBe(200);
      81 |     expect(data1.ok).toBe(true);
      82 |     expect(data2.ok).toBe(true);

      at Object.toBe (__test__/integration/seed-endpoint.integration.test.ts:79:30)

  โ— Seed Semesters API (Integration) โ€บ should seed multiple years

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      93 |     const data = await response.json();
      94 |
    > 95 |     expect(response.status).toBe(200);
         |                             ^
      96 |     expect(data.ok).toBe(true);
      97 |     expect(data.results.length).toBe(4); // 2 years ร— 2 semesters = 4
      98 |

      at Object.toBe (__test__/integration/seed-endpoint.integration.test.ts:95:29)

  โ— Seed Semesters API (Integration) โ€บ should seed timeslots and config when seedData=true

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      108 |     const data = await response.json();
      109 |
    > 110 |     expect(response.status).toBe(200);
          |                             ^
      111 |     expect(data.ok).toBe(true);
      112 |     expect(data.results.length).toBe(2);
      113 |

      at Object.toBe (__test__/integration/seed-endpoint.integration.test.ts:110:29)

  โ— Seed Semesters API (Integration) โ€บ should default to years 2567,2568 if not specified

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      126 |     const data = await response.json();
      127 |
    > 128 |     expect(response.status).toBe(200);
          |                             ^
      129 |     expect(data.ok).toBe(true);
      130 |     expect(data.results.length).toBe(4); // 2 years ร— 2 semesters
      131 |

      at Object.toBe (__test__/integration/seed-endpoint.integration.test.ts:128:29)

  โ— Seed Semesters API (Integration) โ€บ should validate ConfigID format (SEMESTER-YEAR)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      141 |     const data = await response.json();
      142 |
    > 143 |     expect(response.status).toBe(200);
          |                             ^
      144 |     expect(data.ok).toBe(true);
      145 |
      146 |     // Check ConfigID format: should be "1-2567" or "2-2567"

      at Object.toBe (__test__/integration/seed-endpoint.integration.test.ts:143:29)

  โ— Seed Semesters API (Integration) โ€บ should handle GET and POST methods identically

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      164 |     const postData = await postResponse.json();
      165 |
    > 166 |     expect(getResponse.status).toBe(200);
          |                                ^
      167 |     expect(postResponse.status).toBe(200);
      168 |     expect(getData.ok).toBe(postData.ok);
      169 |     expect(getData.results.length).toBe(postData.results.length);

      at Object.toBe (__test__/integration/seed-endpoint.integration.test.ts:166:32)

FAIL src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts (5.13 s)
  ScheduleRepository
    findSchedulesByTerm
      ร— should fetch and transform schedules for a term (87 ms)
      ร— should handle schedules without teachers (1 ms)
    findResponsibilitiesByTerm
      ร— should fetch and transform teacher responsibilities (3 ms)
    createSchedule
      ร— should create a new schedule (2 ms)
    updateSchedule
      ร— should update an existing schedule (1 ms)
    deleteSchedule
      ร— should delete a schedule
    findScheduleById
      ร— should find a schedule by ID (1 ms)
      ร— should return null if schedule not found (1 ms)
    linkTeacherToSchedule
      ร— should link a teacher to a schedule (1 ms)
    unlinkTeacherFromSchedule
      ร— should unlink a teacher from a schedule (1 ms)

  โ— ScheduleRepository โ€บ findSchedulesByTerm โ€บ should fetch and transform schedules for a term

    TypeError: _prisma.default.class_schedule.findMany.mockResolvedValue is not a function

      63 |       ];
      64 |
    > 65 |       (prisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockPrismaData);
         |                                                     ^
      66 |
      67 |       const result = await repository.findSchedulesByTerm(2566, 'SEMESTER_1');
      68 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:65:53)

  โ— ScheduleRepository โ€บ findSchedulesByTerm โ€บ should handle schedules without teachers

    TypeError: _prisma.default.class_schedule.findMany.mockResolvedValue is not a function

      109 |       ];
      110 |
    > 111 |       (prisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockPrismaData);
          |                                                     ^
      112 |
      113 |       const result = await repository.findSchedulesByTerm(2566, 'SEMESTER_1');
      114 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:111:53)

  โ— ScheduleRepository โ€บ findResponsibilitiesByTerm โ€บ should fetch and transform teacher responsibilities

    TypeError: _prisma.default.teachers_responsibility.findMany.mockResolvedValue is not a function

      134 |       ];
      135 |
    > 136 |       (prisma.teachers_responsibility.findMany as jest.Mock).mockResolvedValue(mockPrismaData);
          |                                                              ^
      137 |
      138 |       const result = await repository.findResponsibilitiesByTerm(2566, 'SEMESTER_1');
      139 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:136:62)

  โ— ScheduleRepository โ€บ createSchedule โ€บ should create a new schedule

    TypeError: _prisma.default.class_schedule.create.mockResolvedValue is not a function

      173 |       };
      174 |
    > 175 |       (prisma.class_schedule.create as jest.Mock).mockResolvedValue(mockCreated);
          |                                                   ^
      176 |
      177 |       const result = await repository.createSchedule({
      178 |         ClassID: 'C_NEW',

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:175:51)

  โ— ScheduleRepository โ€บ updateSchedule โ€บ should update an existing schedule

    TypeError: _prisma.default.class_schedule.update.mockResolvedValue is not a function

      201 |       };
      202 |
    > 203 |       (prisma.class_schedule.update as jest.Mock).mockResolvedValue(mockUpdated);
          |                                                   ^
      204 |
      205 |       const result = await repository.updateSchedule('C1', {
      206 |         RoomID: 102,

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:203:51)

  โ— ScheduleRepository โ€บ deleteSchedule โ€บ should delete a schedule

    TypeError: _prisma.default.class_schedule.delete.mockResolvedValue is not a function

      222 |       const mockDeleted = { ClassID: 'C1' };
      223 |
    > 224 |       (prisma.class_schedule.delete as jest.Mock).mockResolvedValue(mockDeleted);
          |                                                   ^
      225 |
      226 |       await repository.deleteSchedule('C1');
      227 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:224:51)

  โ— ScheduleRepository โ€บ findScheduleById โ€บ should find a schedule by ID

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      244 |       };
      245 |
    > 246 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue(mockSchedule);
          |                                                       ^
      247 |
      248 |       const result = await repository.findScheduleById('C1');
      249 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:246:55)

  โ— ScheduleRepository โ€บ findScheduleById โ€บ should return null if schedule not found

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      257 |
      258 |     it('should return null if schedule not found', async () => {
    > 259 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue(null);
          |                                                       ^
      260 |
      261 |       const result = await repository.findScheduleById('NONEXISTENT');
      262 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:259:55)

  โ— ScheduleRepository โ€บ linkTeacherToSchedule โ€บ should link a teacher to a schedule

    TypeError: _prisma.default.teachers_responsibility.update.mockResolvedValue is not a function

      269 |       const mockLinked = { RespID: 1 };
      270 |
    > 271 |       (prisma.teachers_responsibility.update as jest.Mock).mockResolvedValue(mockLinked);
          |                                                            ^
      272 |
      273 |       await repository.linkTeacherToSchedule('C1', 1);
      274 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:271:60)

  โ— ScheduleRepository โ€บ unlinkTeacherFromSchedule โ€บ should unlink a teacher from a schedule

    TypeError: _prisma.default.teachers_responsibility.update.mockResolvedValue is not a function

      288 |       const mockUnlinked = { RespID: 1 };
      289 |
    > 290 |       (prisma.teachers_responsibility.update as jest.Mock).mockResolvedValue(mockUnlinked);
          |                                                            ^
      291 |
      292 |       await repository.unlinkTeacherFromSchedule('C1', 1);
      293 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:290:60)

FAIL __test__/features/conflict/conflict.repository.test.ts (5.374 s)
  Conflict Detection Repository
    findAllConflicts
      ร— should return empty arrays when no schedules exist (87 ms)
      ร— should detect teacher conflicts (same teacher in multiple classes at same timeslot) (3 ms)
      ร— should detect room conflicts (same room used by multiple classes at same timeslot) (1 ms)
      ร— should detect class conflicts (same grade in multiple classes at same timeslot) (1 ms)
      ร— should detect unassigned schedules (NULL teacher or room) (1 ms)
      ร— should detect multiple conflict types simultaneously (1 ms)
      ร— should handle schedules with no conflicts correctly (4 ms)
      ร— should correctly filter by academic year and semester (1 ms)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should return empty arrays when no schedules exist

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      116 |   describe("findAllConflicts", () => {
      117 |     it("should return empty arrays when no schedules exist", async () => {
    > 118 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue([]);
          |                                                         ^
      119 |
      120 |       const result = await conflictRepository.findAllConflicts(2567, "1");
      121 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:118:57)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should detect teacher conflicts (same teacher in multiple classes at same timeslot)

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      159 |       ];
      160 |
    > 161 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockSchedules as any);
          |                                                         ^
      162 |
      163 |       const result = await conflictRepository.findAllConflicts(2567, "1");
      164 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:161:57)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should detect room conflicts (same room used by multiple classes at same timeslot)

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      204 |       ];
      205 |
    > 206 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockSchedules as any);
          |                                                         ^
      207 |
      208 |       const result = await conflictRepository.findAllConflicts(2567, "1");
      209 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:206:57)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should detect class conflicts (same grade in multiple classes at same timeslot)

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      249 |       ];
      250 |
    > 251 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockSchedules as any);
          |                                                         ^
      252 |
      253 |       const result = await conflictRepository.findAllConflicts(2567, "1");
      254 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:251:57)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should detect unassigned schedules (NULL teacher or room)

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      295 |       ];
      296 |
    > 297 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockSchedules as any);
          |                                                         ^
      298 |
      299 |       const result = await conflictRepository.findAllConflicts(2567, "1");
      300 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:297:57)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should detect multiple conflict types simultaneously

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      394 |       ];
      395 |
    > 396 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockSchedules as any);
          |                                                         ^
      397 |
      398 |       const result = await conflictRepository.findAllConflicts(2567, "1");
      399 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:396:57)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should handle schedules with no conflicts correctly

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      437 |       ];
      438 |
    > 439 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockSchedules as any);
          |                                                         ^
      440 |
      441 |       const result = await conflictRepository.findAllConflicts(2567, "1");
      442 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:439:57)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should correctly filter by academic year and semester

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      448 |
      449 |     it("should correctly filter by academic year and semester", async () => {
    > 450 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue([]);
          |                                                         ^
      451 |
      452 |       await conflictRepository.findAllConflicts(2567, "2");
      453 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:450:57)

FAIL src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts (5.844 s)
  Schedule Arrangement Actions
    arrangeScheduleAction
      ร— should create new schedule when no conflicts exist (164 ms)
      ร— should throw error when teacher conflict exists (4 ms)
      โ should reject invalid input (34 ms)
    deleteScheduleAction
      ร— should delete schedule when not locked (5 ms)
      ร— should throw error when schedule is locked (3 ms)
      ร— should throw error when schedule not found (3 ms)
    getSchedulesByTermAction
      ร— should return schedules for given term (2 ms)
      ร— should return empty array when no schedules exist
    updateScheduleLockAction
      ร— should lock schedule (8 ms)
      ร— should unlock schedule (1 ms)
      ร— should throw error when schedule not found

  โ— Schedule Arrangement Actions โ€บ arrangeScheduleAction โ€บ should create new schedule when no conflicts exist

    TypeError: _prisma.default.class_schedule.findMany.mockResolvedValue is not a function

      60 |       };
      61 |
    > 62 |       (prisma.class_schedule.findMany as jest.Mock).mockResolvedValue([]);
         |                                                     ^
      63 |       (prisma.teachers_responsibility.findMany as jest.Mock).mockResolvedValue([
      64 |         {
      65 |           RespID: 1,

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:62:53)

  โ— Schedule Arrangement Actions โ€บ arrangeScheduleAction โ€บ should throw error when teacher conflict exists

    TypeError: _prisma.default.class_schedule.findMany.mockResolvedValue is not a function

       96 |       };
       97 |
    >  98 |       (prisma.class_schedule.findMany as jest.Mock).mockResolvedValue([
          |                                                     ^
       99 |         {
      100 |           ClassID: 'C_M2-1_T1_ENG101',
      101 |           TimeslotID: 'T1',

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:98:53)

  โ— Schedule Arrangement Actions โ€บ deleteScheduleAction โ€บ should delete schedule when not locked

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      165 |       const input = { classId: 'C_M1-1_T1_MATH101' };
      166 |
    > 167 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue({
          |                                                       ^
      168 |         ClassID: input.classId,
      169 |         IsLocked: false,
      170 |       });

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:167:55)

  โ— Schedule Arrangement Actions โ€บ deleteScheduleAction โ€บ should throw error when schedule is locked

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      180 |       const input = { classId: 'C_M1-1_T1_MATH101' };
      181 |
    > 182 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue({
          |                                                       ^
      183 |         ClassID: input.classId,
      184 |         IsLocked: true,
      185 |       });

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:182:55)

  โ— Schedule Arrangement Actions โ€บ deleteScheduleAction โ€บ should throw error when schedule not found

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      194 |       const input = { classId: 'C_M1-1_T1_MATH101' };
      195 |
    > 196 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue(null);
          |                                                       ^
      197 |
      198 |       const result = await deleteScheduleAction(input);
      199 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:196:55)

  โ— Schedule Arrangement Actions โ€บ getSchedulesByTermAction โ€บ should return schedules for given term

    TypeError: _prisma.default.class_schedule.findMany.mockResolvedValue is not a function

      210 |       };
      211 |
    > 212 |       (prisma.class_schedule.findMany as jest.Mock).mockResolvedValue([
          |                                                     ^
      213 |         {
      214 |           ClassID: 'C_M1-1_T1_MATH101',
      215 |           TimeslotID: 'T1',

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:212:53)

  โ— Schedule Arrangement Actions โ€บ getSchedulesByTermAction โ€บ should return empty array when no schedules exist

    TypeError: _prisma.default.class_schedule.findMany.mockResolvedValue is not a function

      251 |       };
      252 |
    > 253 |       (prisma.class_schedule.findMany as jest.Mock).mockResolvedValue([]);
          |                                                     ^
      254 |
      255 |       const result = await getSchedulesByTermAction(input);
      256 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:253:53)

  โ— Schedule Arrangement Actions โ€บ updateScheduleLockAction โ€บ should lock schedule

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      267 |       };
      268 |
    > 269 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue({
          |                                                       ^
      270 |         ClassID: input.classId,
      271 |         IsLocked: false,
      272 |       });

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:269:55)

  โ— Schedule Arrangement Actions โ€บ updateScheduleLockAction โ€บ should unlock schedule

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      285 |       };
      286 |
    > 287 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue({
          |                                                       ^
      288 |         ClassID: input.classId,
      289 |         IsLocked: true,
      290 |       });

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:287:55)

  โ— Schedule Arrangement Actions โ€บ updateScheduleLockAction โ€บ should throw error when schedule not found

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      303 |       };
      304 |
    > 305 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue(null);
          |                                                       ^
      306 |
      307 |       const result = await updateScheduleLockAction(input);
      308 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:305:55)

FAIL __test__/config/config-lifecycle.actions.test.ts (6.386 s)
  updateConfigStatusAction
    ร— should successfully update status from DRAFT to PUBLISHED with sufficient completeness (69 ms)
    ร— should fail to update status from DRAFT to PUBLISHED with insufficient completeness (1 ms)
    ร— should successfully update status from PUBLISHED to LOCKED (8 ms)
    ร— should fail when config is not found (1 ms)
    ร— should handle invalid status transition (2 ms)
    ร— should handle database errors gracefully (1 ms)
    ร— should include reason in update when provided (1 ms)
  updateConfigCompletenessAction
    ร— should calculate 0% completeness when no data exists (2 ms)
    ร— should calculate 100% completeness when all data exists (1 ms)
    ร— should calculate 30% completeness when only timeslots exist (1 ms)
    ร— should use Promise.all for parallel counting (1 ms)
    ร— should handle database errors gracefully
    ร— should update config with correct configId format (3 ms)
  getConfigWithCompletenessAction
    ร— should return null data when config does not exist (1 ms)
    ร— should return config with completeness data when config exists (1 ms)
    ร— should handle database errors gracefully
    ร— should construct correct configId (1 ms)
    ร— should fetch counts in parallel with Promise.all
    ร— should filter counts by academicYear and semester (4 ms)
  Integration scenarios
    ร— should allow complete workflow: create, publish, lock, archive (3 ms)
    ร— should update completeness as data is added (1 ms)

  โ— updateConfigStatusAction โ€บ should successfully update status from DRAFT to PUBLISHED with sufficient completeness

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      30 |     };
      31 |
    > 32 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
         |                                        ^
      33 |     mockPrisma.table_config.update.mockResolvedValue({
      34 |       ...mockConfig,
      35 |       status: "PUBLISHED",

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:32:40)

  โ— updateConfigStatusAction โ€บ should fail to update status from DRAFT to PUBLISHED with insufficient completeness

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      57 |     };
      58 |
    > 59 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
         |                                        ^
      60 |
      61 |     const result = await updateConfigStatusAction({
      62 |       configId: "1-2024",

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:59:40)

  โ— updateConfigStatusAction โ€บ should successfully update status from PUBLISHED to LOCKED

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      79 |     };
      80 |
    > 81 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
         |                                        ^
      82 |     mockPrisma.table_config.update.mockResolvedValue({
      83 |       ...mockConfig,
      84 |       status: "LOCKED",

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:81:40)

  โ— updateConfigStatusAction โ€บ should fail when config is not found

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

       95 |
       96 |   it("should fail when config is not found", async () => {
    >  97 |     mockPrisma.table_config.findUnique.mockResolvedValue(null);
          |                                        ^
       98 |
       99 |     const result = await updateConfigStatusAction({
      100 |       configId: "NONEXISTENT",

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:97:40)

  โ— updateConfigStatusAction โ€บ should handle invalid status transition

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      115 |     };
      116 |
    > 117 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
          |                                        ^
      118 |
      119 |     const result = await updateConfigStatusAction({
      120 |       configId: "1-2024",

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:117:40)

  โ— updateConfigStatusAction โ€บ should handle database errors gracefully

    TypeError: mockPrisma.table_config.findUnique.mockRejectedValue is not a function

      128 |
      129 |   it("should handle database errors gracefully", async () => {
    > 130 |     mockPrisma.table_config.findUnique.mockRejectedValue(
          |                                        ^
      131 |       new Error("Database connection error")
      132 |     );
      133 |

      at Object.mockRejectedValue (__test__/config/config-lifecycle.actions.test.ts:130:40)

  โ— updateConfigStatusAction โ€บ should include reason in update when provided

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      149 |     };
      150 |
    > 151 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
          |                                        ^
      152 |     mockPrisma.table_config.update.mockResolvedValue({
      153 |       ...mockConfig,
      154 |       status: "LOCKED",

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:151:40)

  โ— updateConfigCompletenessAction โ€บ should calculate 0% completeness when no data exists

    TypeError: mockPrisma.timeslot.count.mockResolvedValue is not a function

      171 |
      172 |   it("should calculate 0% completeness when no data exists", async () => {
    > 173 |     mockPrisma.timeslot.count.mockResolvedValue(0);
          |                               ^
      174 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(0);
      175 |     mockPrisma.subject.count.mockResolvedValue(0);
      176 |     mockPrisma.gradelevel.count.mockResolvedValue(0);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:173:31)

  โ— updateConfigCompletenessAction โ€บ should calculate 100% completeness when all data exists

    TypeError: mockPrisma.timeslot.count.mockResolvedValue is not a function

      190 |
      191 |   it("should calculate 100% completeness when all data exists", async () => {
    > 192 |     mockPrisma.timeslot.count.mockResolvedValue(8);
          |                               ^
      193 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(15);
      194 |     mockPrisma.subject.count.mockResolvedValue(12);
      195 |     mockPrisma.gradelevel.count.mockResolvedValue(20);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:192:31)

  โ— updateConfigCompletenessAction โ€บ should calculate 30% completeness when only timeslots exist

    TypeError: mockPrisma.timeslot.count.mockResolvedValue is not a function

      209 |
      210 |   it("should calculate 30% completeness when only timeslots exist", async () => {
    > 211 |     mockPrisma.timeslot.count.mockResolvedValue(8);
          |                               ^
      212 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(0);
      213 |     mockPrisma.subject.count.mockResolvedValue(0);
      214 |     mockPrisma.gradelevel.count.mockResolvedValue(0);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:211:31)

  โ— updateConfigCompletenessAction โ€บ should use Promise.all for parallel counting

    TypeError: mockPrisma.timeslot.count.mockResolvedValue is not a function

      228 |
      229 |   it("should use Promise.all for parallel counting", async () => {
    > 230 |     mockPrisma.timeslot.count.mockResolvedValue(8);
          |                               ^
      231 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(15);
      232 |     mockPrisma.subject.count.mockResolvedValue(12);
      233 |     mockPrisma.gradelevel.count.mockResolvedValue(20);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:230:31)

  โ— updateConfigCompletenessAction โ€บ should handle database errors gracefully

    TypeError: mockPrisma.timeslot.count.mockRejectedValue is not a function

      252 |
      253 |   it("should handle database errors gracefully", async () => {
    > 254 |     mockPrisma.timeslot.count.mockRejectedValue(
          |                               ^
      255 |       new Error("Database connection error")
      256 |     );
      257 |

      at Object.mockRejectedValue (__test__/config/config-lifecycle.actions.test.ts:254:31)

  โ— updateConfigCompletenessAction โ€บ should update config with correct configId format

    TypeError: mockPrisma.timeslot.count.mockResolvedValue is not a function

      266 |
      267 |   it("should update config with correct configId format", async () => {
    > 268 |     mockPrisma.timeslot.count.mockResolvedValue(8);
          |                               ^
      269 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(15);
      270 |     mockPrisma.subject.count.mockResolvedValue(12);
      271 |     mockPrisma.gradelevel.count.mockResolvedValue(20);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:268:31)

  โ— getConfigWithCompletenessAction โ€บ should return null data when config does not exist

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      295 |
      296 |   it("should return null data when config does not exist", async () => {
    > 297 |     mockPrisma.table_config.findUnique.mockResolvedValue(null);
          |                                        ^
      298 |
      299 |     const result = await getConfigWithCompletenessAction({
      300 |       academicYear: 2024,

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:297:40)

  โ— getConfigWithCompletenessAction โ€บ should return config with completeness data when config exists

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      319 |     };
      320 |
    > 321 |   mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
          |                                      ^
      322 |   mockPrisma.timeslot.count.mockResolvedValue(8);
      323 |   mockPrisma.teachers_responsibility.count.mockResolvedValue(15);
      324 |   mockPrisma.class_schedule.count.mockResolvedValue(20);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:321:38)

  โ— getConfigWithCompletenessAction โ€บ should handle database errors gracefully

    TypeError: mockPrisma.table_config.findUnique.mockRejectedValue is not a function

      339 |
      340 |   it("should handle database errors gracefully", async () => {
    > 341 |     mockPrisma.table_config.findUnique.mockRejectedValue(
          |                                        ^
      342 |       new Error("Database connection error")
      343 |     );
      344 |

      at Object.mockRejectedValue (__test__/config/config-lifecycle.actions.test.ts:341:40)

  โ— getConfigWithCompletenessAction โ€บ should construct correct configId

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      353 |
      354 |   it("should construct correct configId", async () => {
    > 355 |     mockPrisma.table_config.findUnique.mockResolvedValue(null);
          |                                        ^
      356 |
      357 |     await getConfigWithCompletenessAction({
      358 |       academicYear: 2024,

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:355:40)

  โ— getConfigWithCompletenessAction โ€บ should fetch counts in parallel with Promise.all

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      372 |     };
      373 |
    > 374 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
          |                                        ^
      375 |     mockPrisma.timeslot.count.mockResolvedValue(0);
      376 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(0);
      377 |     mockPrisma.class_schedule.count.mockResolvedValue(0);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:374:40)

  โ— getConfigWithCompletenessAction โ€บ should filter counts by academicYear and semester

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      396 |     };
      397 |
    > 398 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
          |                                        ^
      399 |     mockPrisma.timeslot.count.mockResolvedValue(8);
      400 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(15);
      401 |     mockPrisma.class_schedule.count.mockResolvedValue(20);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:398:40)

  โ— Integration scenarios โ€บ should allow complete workflow: create, publish, lock, archive

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      437 |
      438 |     // Step 2: Publish
    > 439 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockDraftConfig as any);
          |                                        ^
      440 |     mockPrisma.table_config.update.mockResolvedValue({
      441 |       ...mockDraftConfig,
      442 |       status: "PUBLISHED",

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:439:40)

  โ— Integration scenarios โ€บ should update completeness as data is added

    TypeError: mockPrisma.timeslot.count.mockResolvedValue is not a function

      493 |   it("should update completeness as data is added", async () => {
      494 |     // Initially no data
    > 495 |     mockPrisma.timeslot.count.mockResolvedValue(0);
          |                               ^
      496 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(0);
      497 |     mockPrisma.subject.count.mockResolvedValue(0);
      498 |     mockPrisma.gradelevel.count.mockResolvedValue(0);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:495:31)

PASS __test__/functions/componentFunctions.test.ts
  hexToRGB
    โ converts a six digit hex code to RGB (9 ms)
    โ converts a shorthand hex code to RGB (2 ms)
    โ throws an error for invalid values (49 ms)

PASS __test__/features/dashboard/dashboard-stats.service.test.ts
  Dashboard Statistics Service
    calculateTotalScheduledHours
      โ should return 0 for empty schedules (4 ms)
      โ should return correct count for schedules (1 ms)
      โ should handle large number of schedules (1 ms)
    calculateCompletionRate
      โ should return 0 when no classes (2 ms)
      โ should return 0 when no timeslots (1 ms)
      โ should calculate correct percentage (1 ms)
      โ should cap at 100% (1 ms)
      โ should round to 1 decimal place (1 ms)
    countTeachersWithSchedules
      โ should count 0 teachers with schedules when no schedules (1 ms)
      โ should count teachers with schedules correctly (1 ms)
      โ should handle multiple teachers per schedule (1 ms)
      โ should handle schedules without teachers_responsibility (1 ms)
    countClassCompletion
      โ should count all grades as none when no schedules (3 ms)
      โ should count full schedules correctly (1 ms)
      โ should count partial schedules correctly (9 ms)
      โ should handle over-scheduled classes as full (6 ms)
    calculateTeacherWorkload
      โ should return empty workload for teachers with no schedules (6 ms)
      โ should calculate workload correctly (10 ms)
      โ should format teacher names correctly (1 ms)
      โ should cap utilization rate at 100% (11 ms)
      โ should handle multiple teachers per schedule (1 ms)
    calculateSubjectDistribution
      โ should return empty array for no schedules (10 ms)
      โ should calculate distribution correctly (6 ms)
      โ should use subject code as name if subject not found (2 ms)
      โ should count unique classes correctly (1 ms)
    detectConflicts
      โ should return no conflicts for empty schedules (5 ms)
      โ should detect teacher conflicts (1 ms)
      โ should detect class conflicts (1 ms)
      โ should detect room conflicts (3 ms)
      โ should not count conflicts in different timeslots (1 ms)
      โ should handle null room IDs (4 ms)

PASS src/features/schedule-arrangement/domain/services/conflict-detector.service.test.ts
  Conflict Detection Service
    checkTeacherConflict
      โ should detect teacher conflict when teacher is already scheduled (11 ms)
      โ should allow scheduling when teacher is not conflicted (2 ms)
      โ should allow updating same schedule (same classId) (5 ms)
      โ should return no conflict when no teacher is assigned (3 ms)
    checkClassConflict
      โ should detect class conflict when class already has another subject (2 ms)
      โ should allow scheduling when class is not conflicted
      โ should allow updating same schedule (3 ms)
    checkRoomConflict
      โ should detect room conflict when room is already occupied (7 ms)
      โ should allow scheduling when room is not conflicted (1 ms)
      โ should return no conflict when no room is assigned (4 ms)
      โ should allow updating same schedule (1 ms)
    checkLockedTimeslot
      โ should detect locked timeslot conflict (6 ms)
      โ should allow scheduling when timeslot is not locked (2 ms)
      โ should allow updating same locked schedule (7 ms)
    checkTeacherAssignment
      โ should detect when teacher is not assigned to subject/grade (2 ms)
      โ should allow when teacher is properly assigned (5 ms)
      โ should return no conflict when no teacher is assigned (3 ms)
      โ should check academic year and semester match (6 ms)
    checkAllConflicts
      โ should return first conflict in priority order: locked timeslot (6 ms)
      โ should return teacher not assigned if no locked conflict (1 ms)
      โ should return class conflict if higher priority checks pass (5 ms)
      โ should return teacher conflict if class check passes (1 ms)
      โ should return room conflict as lowest priority (1 ms)
      โ should return no conflict when all checks pass (3 ms)
      โ should allow scheduling without teacher or room (1 ms)
    Edge Cases
      โ should handle empty existing schedules - still checks teacher assignment (2 ms)
      โ should handle empty responsibilities (4 ms)
      โ should handle schedule with null roomId and undefined teacherId (1 ms)

PASS __test__/seed-validation.test.ts
  Seed Data Validation
    Data Dimensions
      โ should have correct number of departments (27 ms)
      โ should have correct number of buildings (17 ms)
      โ should have correct number of Thai prefixes (11 ms)
    Grade Level Generation
      โ should generate 18 grade levels (M.1-M.6, 3 sections each) (5 ms)
      โ should generate correct grade IDs (20 ms)
    Room Generation
      โ should generate 40 rooms across 3 buildings (2 ms)
      โ should generate correct room name format (เธซเนเธญเธ xyz) (5 ms)
    Timeslot Generation
      โ should generate 40 timeslots (5 days ร— 8 periods) (2 ms)
      โ should generate correct timeslot IDs (16 ms)
    Subject Data
      โ should have correct subject categories (13 ms)
      โ should have correct credit values (16 ms)
      โ should follow Thai subject code format (4 ms)
    Period Schedule
      โ should have 8 periods (1 ms)
      โ should have lunch break between periods 4 and 5 (13 ms)
      โ should have different break times for junior and senior
      โ should have 50-minute periods (12 ms)
    Edge Cases
      โ should have locked timeslots for school-wide activities (1 ms)
      โ should calculate correct teacher distribution (9 ms)
    Data Integrity
      โ should have unique teacher email format (6 ms)
      โ should have consistent academic year and semester format (7 ms)

PASS __test__/management-server-actions.test.ts
  Teacher Management Server Actions
    โ getTeachersAction should return success with teacher array (142 ms)
    โ getTeacherByIdAction should return teacher when valid ID provided (24 ms)
    โ teachers should be ordered by Firstname (19 ms)
  Room Management Server Actions
    โ getRoomsAction should return success with room array (23 ms)
    โ rooms should be ordered by RoomID (4 ms)
  Subject Management Server Actions
    โ getSubjectsAction should return success with subject array (20 ms)
    โ subjects should be ordered by SubjectCode (17 ms)
    โ subjects should have valid categories (13 ms)
  GradeLevel Management Server Actions
    โ getGradeLevelsAction should return success with gradelevel array (40 ms)
    โ gradelevels should be ordered by GradeID (41 ms)
    โ gradelevels should have valid year (1-6) (43 ms)
  Error Handling
    โ all actions should handle errors gracefully (189 ms)

PASS __test__/program/program-validation.service.test.ts
  Program Validation Service
    validateNoDuplicateProgram (create)
      โ returns null when no duplicate exists (13 ms)
      โ returns Thai error message when duplicate exists (5 ms)
    validateNoDuplicateProgramForUpdate (update)
      โ returns null when no duplicate exists (1 ms)
      โ returns null when existing record is the same ProgramID
      โ returns Thai error message when another program has same year/track (2 ms)
    validateProgramExists
      โ returns null when program exists (1 ms)
      โ returns Thai error message when program not found (1 ms)

PASS __test__/config/config-lifecycle.schemas.test.ts
  ConfigStatusSchema
    โ should accept valid status values (3 ms)
    โ should reject invalid status values (3 ms)
  UpdateConfigStatusSchema
    โ should accept valid input with required fields (1 ms)
    โ should accept valid input with optional reason
    โ should reject input with missing required fields (7 ms)
    โ should reject input with invalid status (1 ms)
  ConfigCompletenessSchema
    โ should accept valid completeness data (11 ms)
    โ should reject negative counts (4 ms)
    โ should reject non-integer counts (2 ms)
  calculateCompleteness
    โ should return 0% when all counts are zero (10 ms)
    โ should return 30% when only timeslots exist (4 ms)
    โ should return 20% when only teachers exist (1 ms)
    โ should return 100% when all categories have data (1 ms)
    โ should calculate correct percentage for partial data (1 ms)
    โ should round to nearest integer (1 ms)
    โ should not exceed 100% (2 ms)
    โ should handle minimum completeness for publish (30%) (2 ms)
    โ should calculate 50% with timeslots and teachers
  canTransitionStatus
    DRAFT transitions
      โ should allow DRAFT โ’ PUBLISHED when completeness >= 30% (2 ms)
      โ should allow DRAFT โ’ PUBLISHED when completeness > 30% (1 ms)
      โ should not allow DRAFT โ’ PUBLISHED when completeness < 30% (4 ms)
      โ should not allow DRAFT โ’ LOCKED (2 ms)
      โ should not allow DRAFT โ’ ARCHIVED (32 ms)
    PUBLISHED transitions
      โ should allow PUBLISHED โ’ DRAFT (unpublish) (6 ms)
      โ should allow PUBLISHED โ’ LOCKED (3 ms)
      โ should not allow PUBLISHED โ’ ARCHIVED (1 ms)
    LOCKED transitions
      โ should allow LOCKED โ’ PUBLISHED (unlock) (1 ms)
      โ should allow LOCKED โ’ ARCHIVED (2 ms)
      โ should not allow LOCKED โ’ DRAFT (1 ms)
    ARCHIVED transitions
      โ should allow ARCHIVED โ’ LOCKED (restore)
      โ should not allow ARCHIVED โ’ PUBLISHED (1 ms)
      โ should not allow ARCHIVED โ’ DRAFT
    Same status transitions
      โ should not allow DRAFT โ’ DRAFT
      โ should not allow PUBLISHED โ’ PUBLISHED (1 ms)
    Edge cases
      โ should handle completeness = 0 (1 ms)
      โ should handle completeness = 100
      โ should handle boundary case at exactly 30% (1 ms)
      โ should handle boundary case just below 30%
    Complete workflow
      โ should allow complete lifecycle: DRAFT โ’ PUBLISHED โ’ LOCKED โ’ ARCHIVED (2 ms)
      โ should allow reverse workflow: ARCHIVED โ’ LOCKED โ’ PUBLISHED โ’ DRAFT (2 ms)

PASS __test__/functions/parseUtils.test.ts
  parseUtils
    safeParseInt
      โ should parse valid integer strings (7 ms)
      โ should return null for invalid inputs (3 ms)
      โ should handle edge cases (4 ms)
    parseIntWithDefault
      โ should parse valid integer strings (11 ms)
      โ should return default value for invalid inputs (1 ms)

PASS __test__/features/lock/bulk-lock.test.ts
  Bulk Lock Operations
    createBulkLocksSchema validation
      โ should accept valid bulk lock input (6 ms)
      โ should reject empty locks array (2 ms)
      โ should reject locks with missing required fields (1 ms)
      โ should reject locks with invalid types
      โ should accept multiple valid locks (1 ms)
    Bulk lock business logic
      โ should calculate correct number of locks from Cartesian product (1 ms)
      โ should generate correct ClassID format
      โ should validate all locks before creating any (5 ms)
      โ should handle duplicate lock detection (1 ms)
      โ should support batch operations with rollback capability
    Bulk lock preview logic
      โ should generate preview samples correctly (2 ms)
      โ should calculate correct total count for preview (2 ms)
      โ should handle zero selections
      โ should format preview data correctly (1 ms)
    Edge cases
      โ should handle single lock creation (1 ms)
      โ should handle large batch of locks (100+) (5 ms)
      โ should handle special characters in subject codes (1 ms)

  console.warn
    [Type Transformer] Incomplete legacy subject data: {
      hasSubjectCode: false,
      hasSubjectName: true,
      hasGradeID: true,
      hasTeacherID: true,
      hasCategory: true,
      hasCredit: true,
      hasTeachHour: true
    }

    [0m [90m 55 |[39m     [36mtypeof[39m legacy[33m.[39m[33mTeachHour[39m [33m!==[39m [32m'number'[39m
     [90m 56 |[39m   ) {
    [31m[1m>[22m[39m[90m 57 |[39m     console[33m.[39mwarn([32m'[Type Transformer] Incomplete legacy subject data:'[39m[33m,[39m {
     [90m    |[39m             [31m[1m^[22m[39m
     [90m 58 |[39m       hasSubjectCode[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mSubjectCode[39m[33m,[39m
     [90m 59 |[39m       hasSubjectName[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mSubjectName[39m[33m,[39m
     [90m 60 |[39m       hasGradeID[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mGradeID[39m[33m,[39m[0m

      at warn (src/utils/type-transformers.ts:57:13)
      at Object.<anonymous> (__test__/utils/type-transformers.test.ts:118:44)

  console.warn
    [Type Transformer] Incomplete legacy subject data: {
      hasSubjectCode: true,
      hasSubjectName: true,
      hasGradeID: true,
      hasTeacherID: false,
      hasCategory: true,
      hasCredit: true,
      hasTeachHour: true
    }

    [0m [90m 55 |[39m     [36mtypeof[39m legacy[33m.[39m[33mTeachHour[39m [33m!==[39m [32m'number'[39m
     [90m 56 |[39m   ) {
    [31m[1m>[22m[39m[90m 57 |[39m     console[33m.[39mwarn([32m'[Type Transformer] Incomplete legacy subject data:'[39m[33m,[39m {
     [90m    |[39m             [31m[1m^[22m[39m
     [90m 58 |[39m       hasSubjectCode[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mSubjectCode[39m[33m,[39m
     [90m 59 |[39m       hasSubjectName[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mSubjectName[39m[33m,[39m
     [90m 60 |[39m       hasGradeID[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mGradeID[39m[33m,[39m[0m

      at warn (src/utils/type-transformers.ts:57:13)
      at Object.<anonymous> (__test__/utils/type-transformers.test.ts:132:44)

  console.warn
    [Type Transformer] Invalid category: INVALID_CATEGORY

    [0m [90m 71 |[39m   [36mconst[39m category [33m=[39m legacy[33m.[39m[33mCategory[39m [36mas[39m [33mSubjectCategory[39m[33m;[39m
     [90m 72 |[39m   [36mif[39m ([33m![39mvalidCategories[33m.[39mincludes(category)) {
    [31m[1m>[22m[39m[90m 73 |[39m     console[33m.[39mwarn([32m'[Type Transformer] Invalid category:'[39m[33m,[39m legacy[33m.[39m[33mCategory[39m)[33m;[39m
     [90m    |[39m             [31m[1m^[22m[39m
     [90m 74 |[39m     [36mreturn[39m [36mnull[39m[33m;[39m
     [90m 75 |[39m   }
     [90m 76 |[39m[0m

      at warn (src/utils/type-transformers.ts:73:13)
      at Object.<anonymous> (__test__/utils/type-transformers.test.ts:147:44)

PASS __test__/moe-standards/moe-standards.test.ts
  MOE Standards Configuration
    getMOEStandards
      โ should return standards for all grade levels (13 ms)
      โ should have correct lesson ranges for lower secondary (2 ms)
      โ should have correct lesson ranges for upper secondary (1 ms)
      โ should include all 8 core subjects for lower secondary (2 ms)
      โ should have reduced core subjects for upper secondary (1 ms)
    getMinCoreLessons and getMaxCoreLessons
      โ should calculate correct minimum core lessons (1 ms)
      โ should calculate correct maximum core lessons (1 ms)
    validateTotalLessons
      โ should pass for valid lesson count
      โ should fail for too few lessons (1 ms)
      โ should fail for too many lessons
      โ should accept minimum boundary
      โ should accept maximum boundary (1 ms)
    getSubjectGroups
      โ should return all subject groups (2 ms)
    getTrackElectives
      โ should return same electives for all lower secondary (1 ms)
      โ should return science-math electives for science track (1 ms)
      โ should return arts-language electives for arts track (8 ms)
  MOE Validation Utilities
    numericYearToKey and yearKeyToNumeric
      โ should convert numeric year to key (1 ms)
      โ should convert key to numeric year (1 ms)
      โ should throw error for invalid numeric year (78 ms)
      โ should round-trip correctly (1 ms)
    isLowerSecondary and isUpperSecondary
      โ should identify lower secondary years (3 ms)
      โ should identify upper secondary years (4 ms)
      โ should work with numeric years (1 ms)
    getYearDescription
      โ should return Thai description (6 ms)
      โ should work with numeric year (2 ms)
    validateProgramStandards
      โ should validate compliant program (2 ms)
      โ should detect missing core subjects (6 ms)
      โ should detect too few total lessons (5 ms)
      โ should detect too many total lessons (1 ms)
      โ should warn about missing homeroom (1 ms)
      โ should warn about insufficient core subject lessons (1 ms)
      โ should calculate correct lesson breakdown (2 ms)
    formatValidationResult
      โ should format valid result (1 ms)
      โ should format invalid result with errors (1 ms)

  console.warn
    [Type Transformer] Incomplete legacy subject data: {
      hasSubjectCode: true,
      hasSubjectName: false,
      hasGradeID: false,
      hasTeacherID: false,
      hasCategory: false,
      hasCredit: false,
      hasTeachHour: false
    }

    [0m [90m 55 |[39m     [36mtypeof[39m legacy[33m.[39m[33mTeachHour[39m [33m!==[39m [32m'number'[39m
     [90m 56 |[39m   ) {
    [31m[1m>[22m[39m[90m 57 |[39m     console[33m.[39mwarn([32m'[Type Transformer] Incomplete legacy subject data:'[39m[33m,[39m {
     [90m    |[39m             [31m[1m^[22m[39m
     [90m 58 |[39m       hasSubjectCode[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mSubjectCode[39m[33m,[39m
     [90m 59 |[39m       hasSubjectName[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mSubjectName[39m[33m,[39m
     [90m 60 |[39m       hasGradeID[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mGradeID[39m[33m,[39m[0m

      at warn (src/utils/type-transformers.ts:57:13)
          at Array.map (<anonymous>)
      at map (src/utils/type-transformers.ts:114:6)
      at Object.<anonymous> (__test__/utils/type-transformers.test.ts:240:45)

  console.warn
    [Type Transformer] Incomplete legacy subject data: {
      hasSubjectCode: true,
      hasSubjectName: false,
      hasGradeID: false,
      hasTeacherID: false,
      hasCategory: false,
      hasCredit: false,
      hasTeachHour: false
    }

    [0m [90m 55 |[39m     [36mtypeof[39m legacy[33m.[39m[33mTeachHour[39m [33m!==[39m [32m'number'[39m
     [90m 56 |[39m   ) {
    [31m[1m>[22m[39m[90m 57 |[39m     console[33m.[39mwarn([32m'[Type Transformer] Incomplete legacy subject data:'[39m[33m,[39m {
     [90m    |[39m             [31m[1m^[22m[39m
     [90m 58 |[39m       hasSubjectCode[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mSubjectCode[39m[33m,[39m
     [90m 59 |[39m       hasSubjectName[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mSubjectName[39m[33m,[39m
     [90m 60 |[39m       hasGradeID[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mGradeID[39m[33m,[39m[0m

      at warn (src/utils/type-transformers.ts:57:13)
          at Array.map (<anonymous>)
      at map (src/utils/type-transformers.ts:114:6)
      at Object.<anonymous> (__test__/utils/type-transformers.test.ts:258:45)

  console.warn
    [Type Transformer] Incomplete legacy subject data: {
      hasSubjectCode: false,
      hasSubjectName: true,
      hasGradeID: false,
      hasTeacherID: false,
      hasCategory: false,
      hasCredit: false,
      hasTeachHour: false
    }

    [0m [90m 55 |[39m     [36mtypeof[39m legacy[33m.[39m[33mTeachHour[39m [33m!==[39m [32m'number'[39m
     [90m 56 |[39m   ) {
    [31m[1m>[22m[39m[90m 57 |[39m     console[33m.[39mwarn([32m'[Type Transformer] Incomplete legacy subject data:'[39m[33m,[39m {
     [90m    |[39m             [31m[1m^[22m[39m
     [90m 58 |[39m       hasSubjectCode[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mSubjectCode[39m[33m,[39m
     [90m 59 |[39m       hasSubjectName[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mSubjectName[39m[33m,[39m
     [90m 60 |[39m       hasGradeID[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mGradeID[39m[33m,[39m[0m

      at warn (src/utils/type-transformers.ts:57:13)
          at Array.map (<anonymous>)
      at map (src/utils/type-transformers.ts:114:6)
      at Object.<anonymous> (__test__/utils/type-transformers.test.ts:258:45)

  console.warn
    [Type Transformer] Incomplete legacy subject data: {
      hasSubjectCode: true,
      hasSubjectName: false,
      hasGradeID: false,
      hasTeacherID: false,
      hasCategory: false,
      hasCredit: false,
      hasTeachHour: false
    }

    [0m [90m 55 |[39m     [36mtypeof[39m legacy[33m.[39m[33mTeachHour[39m [33m!==[39m [32m'number'[39m
     [90m 56 |[39m   ) {
    [31m[1m>[22m[39m[90m 57 |[39m     console[33m.[39mwarn([32m'[Type Transformer] Incomplete legacy subject data:'[39m[33m,[39m {
     [90m    |[39m             [31m[1m^[22m[39m
     [90m 58 |[39m       hasSubjectCode[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mSubjectCode[39m[33m,[39m
     [90m 59 |[39m       hasSubjectName[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mSubjectName[39m[33m,[39m
     [90m 60 |[39m       hasGradeID[33m:[39m [33m![39m[33m![39mlegacy[33m.[39m[33mGradeID[39m[33m,[39m[0m

      at warn (src/utils/type-transformers.ts:57:13)
          at Array.map (<anonymous>)
      at map (src/utils/type-transformers.ts:114:6)
      at transformLegacySubjects (src/utils/type-transformers.ts:183:27)
      at Object.<anonymous> (__test__/utils/type-transformers.test.ts:365:42)

PASS __test__/utils/type-transformers.test.ts
  Type Transformers
    transformLegacySubject
      โ should transform complete legacy subject to new format (6 ms)
      โ should handle subject without room assignment (6 ms)
      โ should handle subject without grade level (1 ms)
      โ should return null for incomplete data (missing SubjectCode) (358 ms)
      โ should return null for incomplete data (missing TeacherID) (14 ms)
      โ should return null for invalid category (17 ms)
      โ should return null for null input (1 ms)
      โ should return null for undefined input (1 ms)
      โ should handle all valid SubjectCategory values (1 ms)
    transformLegacySubjects
      โ should transform array of legacy subjects (1 ms)
      โ should filter out incomplete subjects (30 ms)
      โ should return empty array for empty input (1 ms)
      โ should return empty array if all items are incomplete (38 ms)
    transformGradeLevel
      โ should transform grade level from PascalCase to camelCase (2 ms)
      โ should handle missing Year with default 0 (1 ms)
      โ should handle missing Number with default 0 (2 ms)
      โ should handle empty object with all defaults (1 ms)
    toLegacyGradeLevel
      โ should transform grade level from camelCase to PascalCase (1 ms)
      โ should handle zero values (1 ms)
    transformAPIResponse
      โ should transform API response with subjects array (3 ms)
      โ should handle response without data (2 ms)
      โ should filter incomplete items in response (13 ms)
    isCompleteLegacyData
      โ should return true for complete legacy data (1 ms)
      โ should return false for incomplete data (missing SubjectCode) (6 ms)
      โ should return false for incomplete data (missing TeacherID) (3 ms)
      โ should return false for TeacherID as string instead of number
      โ should return false for null (1 ms)
      โ should return false for undefined (3 ms)

PASS __test__/features/program/moe-validation.service.test.ts
  MOE Validation Service
    validateProgramMOECredits
      โ should validate compliant junior program (M.1-M.3) (4 ms)
      โ should detect insufficient credits for junior program (3 ms)
      โ should validate compliant senior program (M.4-M.6) (1 ms)
      โ should warn if activities are missing (1 ms)
      โ should reject invalid year (1 ms)
      โ should handle edge case with zero credits (1 ms)
    calculateLearningAreaCredits
      โ should sum credits for specific learning area (1 ms)
      โ should return 0 for learning area with no subjects
      โ should exclude activity subjects from credit calculation

  console.warn
    Native fetch not available, using undici polyfill

    [0m [90m 27 |[39m [36mif[39m ([36mtypeof[39m global[33m.[39mfetch [33m===[39m [32m'undefined'[39m) {
     [90m 28 |[39m   [90m// Fallback for older Node versions (shouldn't happen with Next.js 16)[39m
    [31m[1m>[22m[39m[90m 29 |[39m   console[33m.[39mwarn([32m'Native fetch not available, using undici polyfill'[39m)
     [90m    |[39m           [31m[1m^[22m[39m
     [90m 30 |[39m   [36mconst[39m { fetch[33m,[39m [33mHeaders[39m[33m,[39m [33mRequest[39m[33m,[39m [33mResponse[39m[33m,[39m [33mFormData[39m } [33m=[39m require([32m'undici'[39m)
     [90m 31 |[39m   global[33m.[39mfetch [33m=[39m fetch
     [90m 32 |[39m   global[33m.[39m[33mHeaders[39m [33m=[39m [33mHeaders[39m[0m

      at Object.warn (jest.setup.js:29:11)

  console.warn
    Native fetch not available, using undici polyfill

    [0m [90m 27 |[39m [36mif[39m ([36mtypeof[39m global[33m.[39mfetch [33m===[39m [32m'undefined'[39m) {
     [90m 28 |[39m   [90m// Fallback for older Node versions (shouldn't happen with Next.js 16)[39m
    [31m[1m>[22m[39m[90m 29 |[39m   console[33m.[39mwarn([32m'Native fetch not available, using undici polyfill'[39m)
     [90m    |[39m           [31m[1m^[22m[39m
     [90m 30 |[39m   [36mconst[39m { fetch[33m,[39m [33mHeaders[39m[33m,[39m [33mRequest[39m[33m,[39m [33mResponse[39m[33m,[39m [33mFormData[39m } [33m=[39m require([32m'undici'[39m)
     [90m 31 |[39m   global[33m.[39mfetch [33m=[39m fetch
     [90m 32 |[39m   global[33m.[39m[33mHeaders[39m [33m=[39m [33mHeaders[39m[0m

      at Object.warn (jest.setup.js:29:11)

PASS __test__/component/Component.test.tsx
  Button component
    โ renders provided title (76 ms)
    โ displays icon alt text when iconAlt prop is provided (14 ms)
    โ calls the provided click handler when clicked (86 ms)
    โ does not call the click handler when disabled (20 ms)
    โ applies typography styles when provided (10 ms)
    โ supports native onClick when handleClick is not supplied (17 ms)
    โ respects aria-label override from props (18 ms)
    โ falls back to default accessible label when no title provided (13 ms)
    โ merges className and labelClassName props (14 ms)
    โ accepts custom label styles (11 ms)
    โ renders React element icons directly (6 ms)

PASS __test__/component/management-client-wrappers.test.tsx (5.237 s)
  TeacherManageClient
    โ renders with initial teacher data (274 ms)
    โ shows empty state when no teachers (24 ms)
  RoomsManageClient
    โ renders with initial room data (122 ms)
    โ shows empty state when no rooms (9 ms)
  SubjectManageClient
    โ renders with initial subject data (99 ms)
    โ shows empty state when no subjects (8 ms)
  GradeLevelManageClient
    โ renders with initial gradelevel data (87 ms)
    โ shows empty state when no gradelevels (9 ms)
  Client Wrapper Pattern
    โ all client wrappers accept initialData prop (23 ms)

A worker process has failed to exit gracefully and has been force exited. This is likely caused by tests leaking due to improper teardown. Try running with --detectOpenHandles to find leaks. Active timers can also cause this, ensure that .unref() was called on them.
Summary of all failing tests
FAIL __test__/features/lock/lock-template.service.test.ts
  โ— Lock Template Service โ€บ resolveTemplate โ€บ should generate error when subject not found

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

      163 |       const result = resolveTemplate(createTestInput(template, { availableSubjects: emptySubjects }));
      164 |
    > 165 |       expect(result.errors.some((e) => e.includes("เธงเธดเธเธฒ"))).toBe(true);
          |                                                             ^
      166 |     });
      167 |
      168 |     it("should generate warning when no responsibility found", () => {

      at Object.toBe (__test__/features/lock/lock-template.service.test.ts:165:61)

  โ— Lock Template Service โ€บ resolveTemplate โ€บ should generate warning when no responsibility found

    TypeError: Cannot read properties of undefined (reading 'filter')

      67 |   switch (config.gradeFilter.type) {
      68 |     case 'junior':
    > 69 |       targetGrades = availableGrades.filter(g => g.Level >= 1 && g.Level <= 3);
         |                                      ^
      70 |       break;
      71 |     case 'senior':
      72 |       targetGrades = availableGrades.filter(g => g.Level >= 4 && g.Level <= 6);

      at filter (src/features/lock/domain/services/lock-template.service.ts:69:38)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:172:37)

  โ— Lock Template Service โ€บ resolveTemplate โ€บ should generate error when no matching timeslots

    TypeError: Cannot read properties of undefined (reading 'filter')

      67 |   switch (config.gradeFilter.type) {
      68 |     case 'junior':
    > 69 |       targetGrades = availableGrades.filter(g => g.Level >= 1 && g.Level <= 3);
         |                                      ^
      70 |       break;
      71 |     case 'senior':
      72 |       targetGrades = availableGrades.filter(g => g.Level >= 4 && g.Level <= 6);

      at filter (src/features/lock/domain/services/lock-template.service.ts:69:38)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:190:37)

  โ— Lock Template Service โ€บ validateTemplate โ€บ should validate template with all required data

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: undefined

      238 |       const result = validateTemplate(createTestInput(template));
      239 |
    > 240 |       expect(result.isValid).toBe(true);
          |                              ^
      241 |       expect(result.errors.length).toBe(0);
      242 |     });
      243 |

      at Object.toBe (__test__/features/lock/lock-template.service.test.ts:240:30)

  โ— Lock Template Service โ€บ validateTemplate โ€บ should invalidate when missing subject

    TypeError: Cannot read properties of undefined (reading 'filter')

      67 |   switch (config.gradeFilter.type) {
      68 |     case 'junior':
    > 69 |       targetGrades = availableGrades.filter(g => g.Level >= 1 && g.Level <= 3);
         |                                      ^
      70 |       break;
      71 |     case 'senior':
      72 |       targetGrades = availableGrades.filter(g => g.Level >= 4 && g.Level <= 6);

      at filter (src/features/lock/domain/services/lock-template.service.ts:69:38)
      at resolveTemplate (src/features/lock/domain/services/lock-template.service.ts:168:29)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:247:38)

  โ— Lock Template Service โ€บ validateTemplate โ€บ should invalidate when no matching grades

    TypeError: Cannot read properties of undefined (reading 'filter')

      67 |   switch (config.gradeFilter.type) {
      68 |     case 'junior':
    > 69 |       targetGrades = availableGrades.filter(g => g.Level >= 1 && g.Level <= 3);
         |                                      ^
      70 |       break;
      71 |     case 'senior':
      72 |       targetGrades = availableGrades.filter(g => g.Level >= 4 && g.Level <= 6);

      at filter (src/features/lock/domain/services/lock-template.service.ts:69:38)
      at resolveTemplate (src/features/lock/domain/services/lock-template.service.ts:168:29)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:263:38)

  โ— Lock Template Service โ€บ validateTemplate โ€บ should invalidate when no matching timeslots

    TypeError: Cannot read properties of undefined (reading 'filter')

      67 |   switch (config.gradeFilter.type) {
      68 |     case 'junior':
    > 69 |       targetGrades = availableGrades.filter(g => g.Level >= 1 && g.Level <= 3);
         |                                      ^
      70 |       break;
      71 |     case 'senior':
      72 |       targetGrades = availableGrades.filter(g => g.Level >= 4 && g.Level <= 6);

      at filter (src/features/lock/domain/services/lock-template.service.ts:69:38)
      at resolveTemplate (src/features/lock/domain/services/lock-template.service.ts:168:29)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:278:38)

  โ— Lock Template Service โ€บ getTemplateSummary โ€บ should generate correct summary for lunch-junior template

    TypeError: Cannot read properties of undefined (reading 'filter')

      67 |   switch (config.gradeFilter.type) {
      68 |     case 'junior':
    > 69 |       targetGrades = availableGrades.filter(g => g.Level >= 1 && g.Level <= 3);
         |                                      ^
      70 |       break;
      71 |     case 'senior':
      72 |       targetGrades = availableGrades.filter(g => g.Level >= 4 && g.Level <= 6);

      at filter (src/features/lock/domain/services/lock-template.service.ts:69:38)
      at resolveTemplate (src/features/lock/domain/services/lock-template.service.ts:186:21)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:295:41)

  โ— Lock Template Service โ€บ getTemplateSummary โ€บ should generate correct summary for activity-club template

    TypeError: Cannot read properties of undefined (reading 'length')

      82 |   }
      83 |
    > 84 |   if (targetGrades.length === 0) {
         |                    ^
      85 |     errors.push('เนเธกเนเธเธเธเธฑเนเธเน€เธฃเธตเธขเธเธ—เธตเนเธ•เธฃเธเธเธฑเธเน€เธเธ“เธ‘เน');
      86 |     return { locks, warnings, errors };
      87 |   }

      at length (src/features/lock/domain/services/lock-template.service.ts:84:20)
      at resolveTemplate (src/features/lock/domain/services/lock-template.service.ts:186:21)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:311:41)

  โ— Lock Template Service โ€บ getTemplateSummary โ€บ should show zero counts when no matches

    TypeError: Cannot read properties of undefined (reading 'filter')

      67 |   switch (config.gradeFilter.type) {
      68 |     case 'junior':
    > 69 |       targetGrades = availableGrades.filter(g => g.Level >= 1 && g.Level <= 3);
         |                                      ^
      70 |       break;
      71 |     case 'senior':
      72 |       targetGrades = availableGrades.filter(g => g.Level >= 4 && g.Level <= 6);

      at filter (src/features/lock/domain/services/lock-template.service.ts:69:38)
      at resolveTemplate (src/features/lock/domain/services/lock-template.service.ts:186:21)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:325:41)

  โ— Lock Template Service โ€บ Edge Cases โ€บ should handle template with allDay timeslot filter

    TypeError: Cannot read properties of undefined (reading 'length')

      82 |   }
      83 |
    > 84 |   if (targetGrades.length === 0) {
         |                    ^
      85 |     errors.push('เนเธกเนเธเธเธเธฑเนเธเน€เธฃเธตเธขเธเธ—เธตเนเธ•เธฃเธเธเธฑเธเน€เธเธ“เธ‘เน');
      86 |     return { locks, warnings, errors };
      87 |   }

      at length (src/features/lock/domain/services/lock-template.service.ts:84:20)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:392:37)

  โ— Lock Template Service โ€บ Edge Cases โ€บ should handle multiple periods in timeslot filter

    TypeError: Cannot read properties of undefined (reading 'length')

      82 |   }
      83 |
    > 84 |   if (targetGrades.length === 0) {
         |                    ^
      85 |     errors.push('เนเธกเนเธเธเธเธฑเนเธเน€เธฃเธตเธขเธเธ—เธตเนเธ•เธฃเธเธเธฑเธเน€เธเธ“เธ‘เน');
      86 |     return { locks, warnings, errors };
      87 |   }

      at length (src/features/lock/domain/services/lock-template.service.ts:84:20)
      at Object.<anonymous> (__test__/features/lock/lock-template.service.test.ts:418:37)

FAIL __test__/public-data-layer.test.ts (5.054 s)
  โ— Public Stats Data Layer โ€บ getQuickStats should return valid metrics

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      190 |     expect(stats).toHaveProperty("currentTerm");
      191 |     
    > 192 |     expect(stats.totalTeachers).toBeGreaterThan(0);
          |                                 ^
      193 |     expect(stats.totalClasses).toBeGreaterThan(0);
      194 |     expect(stats.totalRooms).toBeGreaterThan(0);
      195 |     expect(stats.periodsPerDay).toBeGreaterThan(0);

      at Object.toBeGreaterThan (__test__/public-data-layer.test.ts:192:33)

  โ— Public Stats Data Layer โ€บ getPeriodLoadPerDay should return data for all weekdays

    expect(received).toBe(expected) // Object.is equality

    Expected: 5
    Received: 0

      201 |     
      202 |     // Should have data for MON-FRI (5 days)
    > 203 |     expect(periodLoad.length).toBe(5);
          |                               ^
      204 |     
      205 |     const expectedDays = ["MON", "TUE", "WED", "THU", "FRI"];
      206 |     const actualDays = periodLoad.map(d => d.day);

      at Object.toBe (__test__/public-data-layer.test.ts:203:31)

  โ— Public Stats Data Layer โ€บ getRoomOccupancy should return valid occupancy data

    expect(received).toBeGreaterThan(expected)

    Expected: > 0
    Received:   0

      220 |     
      221 |     // Should have data (at least one timeslot)
    > 222 |     expect(occupancy.length).toBeGreaterThan(0);
          |                              ^
      223 |     
      224 |     occupancy.forEach((item) => {
      225 |       expect(item).toHaveProperty("day");

      at Object.toBeGreaterThan (__test__/public-data-layer.test.ts:222:30)

FAIL __test__/integration/seed-endpoint.integration.test.ts (5.293 s)
  โ— Seed Semesters API (Integration) โ€บ should create semesters when authenticated

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      47 |     const data = await response.json();
      48 |
    > 49 |     expect(response.status).toBe(200);
         |                             ^
      50 |     expect(data.ok).toBe(true);
      51 |     expect(data.results).toBeDefined();
      52 |     expect(data.results.length).toBe(2); // 2 semesters (1 & 2) for 1 year

      at Object.toBe (__test__/integration/seed-endpoint.integration.test.ts:49:29)

  โ— Seed Semesters API (Integration) โ€บ should be idempotent (can run multiple times)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      77 |     const data2 = await response2.json();
      78 |
    > 79 |     expect(response1.status).toBe(200);
         |                              ^
      80 |     expect(response2.status).toBe(200);
      81 |     expect(data1.ok).toBe(true);
      82 |     expect(data2.ok).toBe(true);

      at Object.toBe (__test__/integration/seed-endpoint.integration.test.ts:79:30)

  โ— Seed Semesters API (Integration) โ€บ should seed multiple years

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      93 |     const data = await response.json();
      94 |
    > 95 |     expect(response.status).toBe(200);
         |                             ^
      96 |     expect(data.ok).toBe(true);
      97 |     expect(data.results.length).toBe(4); // 2 years ร— 2 semesters = 4
      98 |

      at Object.toBe (__test__/integration/seed-endpoint.integration.test.ts:95:29)

  โ— Seed Semesters API (Integration) โ€บ should seed timeslots and config when seedData=true

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      108 |     const data = await response.json();
      109 |
    > 110 |     expect(response.status).toBe(200);
          |                             ^
      111 |     expect(data.ok).toBe(true);
      112 |     expect(data.results.length).toBe(2);
      113 |

      at Object.toBe (__test__/integration/seed-endpoint.integration.test.ts:110:29)

  โ— Seed Semesters API (Integration) โ€บ should default to years 2567,2568 if not specified

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      126 |     const data = await response.json();
      127 |
    > 128 |     expect(response.status).toBe(200);
          |                             ^
      129 |     expect(data.ok).toBe(true);
      130 |     expect(data.results.length).toBe(4); // 2 years ร— 2 semesters
      131 |

      at Object.toBe (__test__/integration/seed-endpoint.integration.test.ts:128:29)

  โ— Seed Semesters API (Integration) โ€บ should validate ConfigID format (SEMESTER-YEAR)

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      141 |     const data = await response.json();
      142 |
    > 143 |     expect(response.status).toBe(200);
          |                             ^
      144 |     expect(data.ok).toBe(true);
      145 |
      146 |     // Check ConfigID format: should be "1-2567" or "2-2567"

      at Object.toBe (__test__/integration/seed-endpoint.integration.test.ts:143:29)

  โ— Seed Semesters API (Integration) โ€บ should handle GET and POST methods identically

    expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 401

      164 |     const postData = await postResponse.json();
      165 |
    > 166 |     expect(getResponse.status).toBe(200);
          |                                ^
      167 |     expect(postResponse.status).toBe(200);
      168 |     expect(getData.ok).toBe(postData.ok);
      169 |     expect(getData.results.length).toBe(postData.results.length);

      at Object.toBe (__test__/integration/seed-endpoint.integration.test.ts:166:32)

FAIL src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts (5.13 s)
  โ— ScheduleRepository โ€บ findSchedulesByTerm โ€บ should fetch and transform schedules for a term

    TypeError: _prisma.default.class_schedule.findMany.mockResolvedValue is not a function

      63 |       ];
      64 |
    > 65 |       (prisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockPrismaData);
         |                                                     ^
      66 |
      67 |       const result = await repository.findSchedulesByTerm(2566, 'SEMESTER_1');
      68 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:65:53)

  โ— ScheduleRepository โ€บ findSchedulesByTerm โ€บ should handle schedules without teachers

    TypeError: _prisma.default.class_schedule.findMany.mockResolvedValue is not a function

      109 |       ];
      110 |
    > 111 |       (prisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockPrismaData);
          |                                                     ^
      112 |
      113 |       const result = await repository.findSchedulesByTerm(2566, 'SEMESTER_1');
      114 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:111:53)

  โ— ScheduleRepository โ€บ findResponsibilitiesByTerm โ€บ should fetch and transform teacher responsibilities

    TypeError: _prisma.default.teachers_responsibility.findMany.mockResolvedValue is not a function

      134 |       ];
      135 |
    > 136 |       (prisma.teachers_responsibility.findMany as jest.Mock).mockResolvedValue(mockPrismaData);
          |                                                              ^
      137 |
      138 |       const result = await repository.findResponsibilitiesByTerm(2566, 'SEMESTER_1');
      139 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:136:62)

  โ— ScheduleRepository โ€บ createSchedule โ€บ should create a new schedule

    TypeError: _prisma.default.class_schedule.create.mockResolvedValue is not a function

      173 |       };
      174 |
    > 175 |       (prisma.class_schedule.create as jest.Mock).mockResolvedValue(mockCreated);
          |                                                   ^
      176 |
      177 |       const result = await repository.createSchedule({
      178 |         ClassID: 'C_NEW',

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:175:51)

  โ— ScheduleRepository โ€บ updateSchedule โ€บ should update an existing schedule

    TypeError: _prisma.default.class_schedule.update.mockResolvedValue is not a function

      201 |       };
      202 |
    > 203 |       (prisma.class_schedule.update as jest.Mock).mockResolvedValue(mockUpdated);
          |                                                   ^
      204 |
      205 |       const result = await repository.updateSchedule('C1', {
      206 |         RoomID: 102,

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:203:51)

  โ— ScheduleRepository โ€บ deleteSchedule โ€บ should delete a schedule

    TypeError: _prisma.default.class_schedule.delete.mockResolvedValue is not a function

      222 |       const mockDeleted = { ClassID: 'C1' };
      223 |
    > 224 |       (prisma.class_schedule.delete as jest.Mock).mockResolvedValue(mockDeleted);
          |                                                   ^
      225 |
      226 |       await repository.deleteSchedule('C1');
      227 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:224:51)

  โ— ScheduleRepository โ€บ findScheduleById โ€บ should find a schedule by ID

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      244 |       };
      245 |
    > 246 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue(mockSchedule);
          |                                                       ^
      247 |
      248 |       const result = await repository.findScheduleById('C1');
      249 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:246:55)

  โ— ScheduleRepository โ€บ findScheduleById โ€บ should return null if schedule not found

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      257 |
      258 |     it('should return null if schedule not found', async () => {
    > 259 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue(null);
          |                                                       ^
      260 |
      261 |       const result = await repository.findScheduleById('NONEXISTENT');
      262 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:259:55)

  โ— ScheduleRepository โ€บ linkTeacherToSchedule โ€บ should link a teacher to a schedule

    TypeError: _prisma.default.teachers_responsibility.update.mockResolvedValue is not a function

      269 |       const mockLinked = { RespID: 1 };
      270 |
    > 271 |       (prisma.teachers_responsibility.update as jest.Mock).mockResolvedValue(mockLinked);
          |                                                            ^
      272 |
      273 |       await repository.linkTeacherToSchedule('C1', 1);
      274 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:271:60)

  โ— ScheduleRepository โ€บ unlinkTeacherFromSchedule โ€บ should unlink a teacher from a schedule

    TypeError: _prisma.default.teachers_responsibility.update.mockResolvedValue is not a function

      288 |       const mockUnlinked = { RespID: 1 };
      289 |
    > 290 |       (prisma.teachers_responsibility.update as jest.Mock).mockResolvedValue(mockUnlinked);
          |                                                            ^
      291 |
      292 |       await repository.unlinkTeacherFromSchedule('C1', 1);
      293 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/infrastructure/repositories/schedule.repository.test.ts:290:60)

FAIL __test__/features/conflict/conflict.repository.test.ts (5.374 s)
  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should return empty arrays when no schedules exist

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      116 |   describe("findAllConflicts", () => {
      117 |     it("should return empty arrays when no schedules exist", async () => {
    > 118 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue([]);
          |                                                         ^
      119 |
      120 |       const result = await conflictRepository.findAllConflicts(2567, "1");
      121 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:118:57)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should detect teacher conflicts (same teacher in multiple classes at same timeslot)

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      159 |       ];
      160 |
    > 161 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockSchedules as any);
          |                                                         ^
      162 |
      163 |       const result = await conflictRepository.findAllConflicts(2567, "1");
      164 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:161:57)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should detect room conflicts (same room used by multiple classes at same timeslot)

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      204 |       ];
      205 |
    > 206 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockSchedules as any);
          |                                                         ^
      207 |
      208 |       const result = await conflictRepository.findAllConflicts(2567, "1");
      209 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:206:57)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should detect class conflicts (same grade in multiple classes at same timeslot)

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      249 |       ];
      250 |
    > 251 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockSchedules as any);
          |                                                         ^
      252 |
      253 |       const result = await conflictRepository.findAllConflicts(2567, "1");
      254 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:251:57)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should detect unassigned schedules (NULL teacher or room)

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      295 |       ];
      296 |
    > 297 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockSchedules as any);
          |                                                         ^
      298 |
      299 |       const result = await conflictRepository.findAllConflicts(2567, "1");
      300 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:297:57)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should detect multiple conflict types simultaneously

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      394 |       ];
      395 |
    > 396 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockSchedules as any);
          |                                                         ^
      397 |
      398 |       const result = await conflictRepository.findAllConflicts(2567, "1");
      399 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:396:57)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should handle schedules with no conflicts correctly

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      437 |       ];
      438 |
    > 439 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue(mockSchedules as any);
          |                                                         ^
      440 |
      441 |       const result = await conflictRepository.findAllConflicts(2567, "1");
      442 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:439:57)

  โ— Conflict Detection Repository โ€บ findAllConflicts โ€บ should correctly filter by academic year and semester

    TypeError: mockPrisma.class_schedule.findMany.mockResolvedValue is not a function

      448 |
      449 |     it("should correctly filter by academic year and semester", async () => {
    > 450 |       (mockPrisma.class_schedule.findMany as jest.Mock).mockResolvedValue([]);
          |                                                         ^
      451 |
      452 |       await conflictRepository.findAllConflicts(2567, "2");
      453 |

      at Object.mockResolvedValue (__test__/features/conflict/conflict.repository.test.ts:450:57)

FAIL src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts (5.844 s)
  โ— Schedule Arrangement Actions โ€บ arrangeScheduleAction โ€บ should create new schedule when no conflicts exist

    TypeError: _prisma.default.class_schedule.findMany.mockResolvedValue is not a function

      60 |       };
      61 |
    > 62 |       (prisma.class_schedule.findMany as jest.Mock).mockResolvedValue([]);
         |                                                     ^
      63 |       (prisma.teachers_responsibility.findMany as jest.Mock).mockResolvedValue([
      64 |         {
      65 |           RespID: 1,

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:62:53)

  โ— Schedule Arrangement Actions โ€บ arrangeScheduleAction โ€บ should throw error when teacher conflict exists

    TypeError: _prisma.default.class_schedule.findMany.mockResolvedValue is not a function

       96 |       };
       97 |
    >  98 |       (prisma.class_schedule.findMany as jest.Mock).mockResolvedValue([
          |                                                     ^
       99 |         {
      100 |           ClassID: 'C_M2-1_T1_ENG101',
      101 |           TimeslotID: 'T1',

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:98:53)

  โ— Schedule Arrangement Actions โ€บ deleteScheduleAction โ€บ should delete schedule when not locked

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      165 |       const input = { classId: 'C_M1-1_T1_MATH101' };
      166 |
    > 167 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue({
          |                                                       ^
      168 |         ClassID: input.classId,
      169 |         IsLocked: false,
      170 |       });

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:167:55)

  โ— Schedule Arrangement Actions โ€บ deleteScheduleAction โ€บ should throw error when schedule is locked

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      180 |       const input = { classId: 'C_M1-1_T1_MATH101' };
      181 |
    > 182 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue({
          |                                                       ^
      183 |         ClassID: input.classId,
      184 |         IsLocked: true,
      185 |       });

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:182:55)

  โ— Schedule Arrangement Actions โ€บ deleteScheduleAction โ€บ should throw error when schedule not found

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      194 |       const input = { classId: 'C_M1-1_T1_MATH101' };
      195 |
    > 196 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue(null);
          |                                                       ^
      197 |
      198 |       const result = await deleteScheduleAction(input);
      199 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:196:55)

  โ— Schedule Arrangement Actions โ€บ getSchedulesByTermAction โ€บ should return schedules for given term

    TypeError: _prisma.default.class_schedule.findMany.mockResolvedValue is not a function

      210 |       };
      211 |
    > 212 |       (prisma.class_schedule.findMany as jest.Mock).mockResolvedValue([
          |                                                     ^
      213 |         {
      214 |           ClassID: 'C_M1-1_T1_MATH101',
      215 |           TimeslotID: 'T1',

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:212:53)

  โ— Schedule Arrangement Actions โ€บ getSchedulesByTermAction โ€บ should return empty array when no schedules exist

    TypeError: _prisma.default.class_schedule.findMany.mockResolvedValue is not a function

      251 |       };
      252 |
    > 253 |       (prisma.class_schedule.findMany as jest.Mock).mockResolvedValue([]);
          |                                                     ^
      254 |
      255 |       const result = await getSchedulesByTermAction(input);
      256 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:253:53)

  โ— Schedule Arrangement Actions โ€บ updateScheduleLockAction โ€บ should lock schedule

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      267 |       };
      268 |
    > 269 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue({
          |                                                       ^
      270 |         ClassID: input.classId,
      271 |         IsLocked: false,
      272 |       });

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:269:55)

  โ— Schedule Arrangement Actions โ€บ updateScheduleLockAction โ€บ should unlock schedule

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      285 |       };
      286 |
    > 287 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue({
          |                                                       ^
      288 |         ClassID: input.classId,
      289 |         IsLocked: true,
      290 |       });

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:287:55)

  โ— Schedule Arrangement Actions โ€บ updateScheduleLockAction โ€บ should throw error when schedule not found

    TypeError: _prisma.default.class_schedule.findUnique.mockResolvedValue is not a function

      303 |       };
      304 |
    > 305 |       (prisma.class_schedule.findUnique as jest.Mock).mockResolvedValue(null);
          |                                                       ^
      306 |
      307 |       const result = await updateScheduleLockAction(input);
      308 |

      at Object.mockResolvedValue (src/features/schedule-arrangement/application/actions/schedule-arrangement.actions.test.ts:305:55)

FAIL __test__/config/config-lifecycle.actions.test.ts (6.386 s)
  โ— updateConfigStatusAction โ€บ should successfully update status from DRAFT to PUBLISHED with sufficient completeness

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      30 |     };
      31 |
    > 32 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
         |                                        ^
      33 |     mockPrisma.table_config.update.mockResolvedValue({
      34 |       ...mockConfig,
      35 |       status: "PUBLISHED",

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:32:40)

  โ— updateConfigStatusAction โ€บ should fail to update status from DRAFT to PUBLISHED with insufficient completeness

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      57 |     };
      58 |
    > 59 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
         |                                        ^
      60 |
      61 |     const result = await updateConfigStatusAction({
      62 |       configId: "1-2024",

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:59:40)

  โ— updateConfigStatusAction โ€บ should successfully update status from PUBLISHED to LOCKED

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      79 |     };
      80 |
    > 81 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
         |                                        ^
      82 |     mockPrisma.table_config.update.mockResolvedValue({
      83 |       ...mockConfig,
      84 |       status: "LOCKED",

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:81:40)

  โ— updateConfigStatusAction โ€บ should fail when config is not found

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

       95 |
       96 |   it("should fail when config is not found", async () => {
    >  97 |     mockPrisma.table_config.findUnique.mockResolvedValue(null);
          |                                        ^
       98 |
       99 |     const result = await updateConfigStatusAction({
      100 |       configId: "NONEXISTENT",

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:97:40)

  โ— updateConfigStatusAction โ€บ should handle invalid status transition

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      115 |     };
      116 |
    > 117 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
          |                                        ^
      118 |
      119 |     const result = await updateConfigStatusAction({
      120 |       configId: "1-2024",

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:117:40)

  โ— updateConfigStatusAction โ€บ should handle database errors gracefully

    TypeError: mockPrisma.table_config.findUnique.mockRejectedValue is not a function

      128 |
      129 |   it("should handle database errors gracefully", async () => {
    > 130 |     mockPrisma.table_config.findUnique.mockRejectedValue(
          |                                        ^
      131 |       new Error("Database connection error")
      132 |     );
      133 |

      at Object.mockRejectedValue (__test__/config/config-lifecycle.actions.test.ts:130:40)

  โ— updateConfigStatusAction โ€บ should include reason in update when provided

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      149 |     };
      150 |
    > 151 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
          |                                        ^
      152 |     mockPrisma.table_config.update.mockResolvedValue({
      153 |       ...mockConfig,
      154 |       status: "LOCKED",

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:151:40)

  โ— updateConfigCompletenessAction โ€บ should calculate 0% completeness when no data exists

    TypeError: mockPrisma.timeslot.count.mockResolvedValue is not a function

      171 |
      172 |   it("should calculate 0% completeness when no data exists", async () => {
    > 173 |     mockPrisma.timeslot.count.mockResolvedValue(0);
          |                               ^
      174 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(0);
      175 |     mockPrisma.subject.count.mockResolvedValue(0);
      176 |     mockPrisma.gradelevel.count.mockResolvedValue(0);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:173:31)

  โ— updateConfigCompletenessAction โ€บ should calculate 100% completeness when all data exists

    TypeError: mockPrisma.timeslot.count.mockResolvedValue is not a function

      190 |
      191 |   it("should calculate 100% completeness when all data exists", async () => {
    > 192 |     mockPrisma.timeslot.count.mockResolvedValue(8);
          |                               ^
      193 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(15);
      194 |     mockPrisma.subject.count.mockResolvedValue(12);
      195 |     mockPrisma.gradelevel.count.mockResolvedValue(20);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:192:31)

  โ— updateConfigCompletenessAction โ€บ should calculate 30% completeness when only timeslots exist

    TypeError: mockPrisma.timeslot.count.mockResolvedValue is not a function

      209 |
      210 |   it("should calculate 30% completeness when only timeslots exist", async () => {
    > 211 |     mockPrisma.timeslot.count.mockResolvedValue(8);
          |                               ^
      212 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(0);
      213 |     mockPrisma.subject.count.mockResolvedValue(0);
      214 |     mockPrisma.gradelevel.count.mockResolvedValue(0);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:211:31)

  โ— updateConfigCompletenessAction โ€บ should use Promise.all for parallel counting

    TypeError: mockPrisma.timeslot.count.mockResolvedValue is not a function

      228 |
      229 |   it("should use Promise.all for parallel counting", async () => {
    > 230 |     mockPrisma.timeslot.count.mockResolvedValue(8);
          |                               ^
      231 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(15);
      232 |     mockPrisma.subject.count.mockResolvedValue(12);
      233 |     mockPrisma.gradelevel.count.mockResolvedValue(20);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:230:31)

  โ— updateConfigCompletenessAction โ€บ should handle database errors gracefully

    TypeError: mockPrisma.timeslot.count.mockRejectedValue is not a function

      252 |
      253 |   it("should handle database errors gracefully", async () => {
    > 254 |     mockPrisma.timeslot.count.mockRejectedValue(
          |                               ^
      255 |       new Error("Database connection error")
      256 |     );
      257 |

      at Object.mockRejectedValue (__test__/config/config-lifecycle.actions.test.ts:254:31)

  โ— updateConfigCompletenessAction โ€บ should update config with correct configId format

    TypeError: mockPrisma.timeslot.count.mockResolvedValue is not a function

      266 |
      267 |   it("should update config with correct configId format", async () => {
    > 268 |     mockPrisma.timeslot.count.mockResolvedValue(8);
          |                               ^
      269 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(15);
      270 |     mockPrisma.subject.count.mockResolvedValue(12);
      271 |     mockPrisma.gradelevel.count.mockResolvedValue(20);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:268:31)

  โ— getConfigWithCompletenessAction โ€บ should return null data when config does not exist

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      295 |
      296 |   it("should return null data when config does not exist", async () => {
    > 297 |     mockPrisma.table_config.findUnique.mockResolvedValue(null);
          |                                        ^
      298 |
      299 |     const result = await getConfigWithCompletenessAction({
      300 |       academicYear: 2024,

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:297:40)

  โ— getConfigWithCompletenessAction โ€บ should return config with completeness data when config exists

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      319 |     };
      320 |
    > 321 |   mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
          |                                      ^
      322 |   mockPrisma.timeslot.count.mockResolvedValue(8);
      323 |   mockPrisma.teachers_responsibility.count.mockResolvedValue(15);
      324 |   mockPrisma.class_schedule.count.mockResolvedValue(20);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:321:38)

  โ— getConfigWithCompletenessAction โ€บ should handle database errors gracefully

    TypeError: mockPrisma.table_config.findUnique.mockRejectedValue is not a function

      339 |
      340 |   it("should handle database errors gracefully", async () => {
    > 341 |     mockPrisma.table_config.findUnique.mockRejectedValue(
          |                                        ^
      342 |       new Error("Database connection error")
      343 |     );
      344 |

      at Object.mockRejectedValue (__test__/config/config-lifecycle.actions.test.ts:341:40)

  โ— getConfigWithCompletenessAction โ€บ should construct correct configId

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      353 |
      354 |   it("should construct correct configId", async () => {
    > 355 |     mockPrisma.table_config.findUnique.mockResolvedValue(null);
          |                                        ^
      356 |
      357 |     await getConfigWithCompletenessAction({
      358 |       academicYear: 2024,

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:355:40)

  โ— getConfigWithCompletenessAction โ€บ should fetch counts in parallel with Promise.all

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      372 |     };
      373 |
    > 374 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
          |                                        ^
      375 |     mockPrisma.timeslot.count.mockResolvedValue(0);
      376 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(0);
      377 |     mockPrisma.class_schedule.count.mockResolvedValue(0);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:374:40)

  โ— getConfigWithCompletenessAction โ€บ should filter counts by academicYear and semester

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      396 |     };
      397 |
    > 398 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockConfig as any);
          |                                        ^
      399 |     mockPrisma.timeslot.count.mockResolvedValue(8);
      400 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(15);
      401 |     mockPrisma.class_schedule.count.mockResolvedValue(20);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:398:40)

  โ— Integration scenarios โ€บ should allow complete workflow: create, publish, lock, archive

    TypeError: mockPrisma.table_config.findUnique.mockResolvedValue is not a function

      437 |
      438 |     // Step 2: Publish
    > 439 |     mockPrisma.table_config.findUnique.mockResolvedValue(mockDraftConfig as any);
          |                                        ^
      440 |     mockPrisma.table_config.update.mockResolvedValue({
      441 |       ...mockDraftConfig,
      442 |       status: "PUBLISHED",

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:439:40)

  โ— Integration scenarios โ€บ should update completeness as data is added

    TypeError: mockPrisma.timeslot.count.mockResolvedValue is not a function

      493 |   it("should update completeness as data is added", async () => {
      494 |     // Initially no data
    > 495 |     mockPrisma.timeslot.count.mockResolvedValue(0);
          |                               ^
      496 |     mockPrisma.teachers_responsibility.count.mockResolvedValue(0);
      497 |     mockPrisma.subject.count.mockResolvedValue(0);
      498 |     mockPrisma.gradelevel.count.mockResolvedValue(0);

      at Object.mockResolvedValue (__test__/config/config-lifecycle.actions.test.ts:495:31)


Test Suites: 7 failed, 14 passed, 21 total
Tests:       71 failed, 278 passed, 349 total
Snapshots:   0 total
Time:        20.13 s
Ran all test suites.
โ€ELIFECYCLEโ€ Test failed. See above for more details.
