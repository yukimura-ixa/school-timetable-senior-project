
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Class_scheduleScalarFieldEnum = {
  ClassID: 'ClassID',
  TimeslotID: 'TimeslotID',
  SubjectCode: 'SubjectCode',
  RoomID: 'RoomID',
  GradeID: 'GradeID',
  IsLocked: 'IsLocked'
};

exports.Prisma.GradelevelScalarFieldEnum = {
  GradeID: 'GradeID',
  Year: 'Year',
  Number: 'Number'
};

exports.Prisma.RoomScalarFieldEnum = {
  RoomID: 'RoomID',
  RoomName: 'RoomName',
  Building: 'Building',
  Floor: 'Floor'
};

exports.Prisma.SubjectScalarFieldEnum = {
  SubjectCode: 'SubjectCode',
  SubjectName: 'SubjectName',
  Credit: 'Credit',
  Category: 'Category',
  ProgramID: 'ProgramID'
};

exports.Prisma.ProgramScalarFieldEnum = {
  ProgramID: 'ProgramID',
  ProgramName: 'ProgramName',
  Semester: 'Semester'
};

exports.Prisma.TeacherScalarFieldEnum = {
  TeacherID: 'TeacherID',
  Prefix: 'Prefix',
  Firstname: 'Firstname',
  Lastname: 'Lastname',
  Department: 'Department',
  Email: 'Email',
  Role: 'Role'
};

exports.Prisma.TimeslotScalarFieldEnum = {
  TimeslotID: 'TimeslotID',
  AcademicYear: 'AcademicYear',
  Semester: 'Semester',
  StartTime: 'StartTime',
  EndTime: 'EndTime',
  Breaktime: 'Breaktime',
  DayOfWeek: 'DayOfWeek'
};

exports.Prisma.Teachers_responsibilityScalarFieldEnum = {
  RespID: 'RespID',
  TeacherID: 'TeacherID',
  GradeID: 'GradeID',
  SubjectCode: 'SubjectCode',
  AcademicYear: 'AcademicYear',
  Semester: 'Semester',
  TeachHour: 'TeachHour'
};

exports.Prisma.Table_configScalarFieldEnum = {
  ConfigID: 'ConfigID',
  AcademicYear: 'AcademicYear',
  Semester: 'Semester',
  Config: 'Config'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.day_of_week = exports.$Enums.day_of_week = {
  MON: 'MON',
  TUE: 'TUE',
  WED: 'WED',
  THU: 'THU',
  FRI: 'FRI',
  SAT: 'SAT',
  SUN: 'SUN'
};

exports.subject_credit = exports.$Enums.subject_credit = {
  CREDIT_05: 'CREDIT_05',
  CREDIT_10: 'CREDIT_10',
  CREDIT_15: 'CREDIT_15',
  CREDIT_20: 'CREDIT_20'
};

exports.semester = exports.$Enums.semester = {
  SEMESTER_1: 'SEMESTER_1',
  SEMESTER_2: 'SEMESTER_2'
};

exports.breaktime = exports.$Enums.breaktime = {
  BREAK_JUNIOR: 'BREAK_JUNIOR',
  BREAK_SENIOR: 'BREAK_SENIOR',
  BREAK_BOTH: 'BREAK_BOTH',
  NOT_BREAK: 'NOT_BREAK'
};

exports.Prisma.ModelName = {
  class_schedule: 'class_schedule',
  gradelevel: 'gradelevel',
  room: 'room',
  subject: 'subject',
  program: 'program',
  teacher: 'teacher',
  timeslot: 'timeslot',
  teachers_responsibility: 'teachers_responsibility',
  table_config: 'table_config'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "B:\\Dev\\school-timetable-senior-project\\prisma\\generated",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "B:\\Dev\\school-timetable-senior-project\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "..",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../prisma/generated\"\n}\n\ngenerator dbml {\n  provider              = \"prisma-dbml-generator\"\n  includeRelationFields = \"false\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  // directUrl = env(\"DIRECT_DATABASE_URL\")\n}\n\nmodel class_schedule {\n  ClassID                 String                    @id\n  TimeslotID              String\n  SubjectCode             String\n  RoomID                  Int?\n  GradeID                 String\n  IsLocked                Boolean                   @default(false)\n  gradelevel              gradelevel                @relation(fields: [GradeID], references: [GradeID], onDelete: Cascade, map: \"fk_class_schedule_grade\")\n  room                    room?                     @relation(fields: [RoomID], references: [RoomID], map: \"fk_class_schedule_room\")\n  subject                 subject                   @relation(fields: [SubjectCode], references: [SubjectCode], onDelete: Cascade, map: \"fk_class_schedule_subject\")\n  timeslot                timeslot                  @relation(fields: [TimeslotID], references: [TimeslotID], onDelete: Cascade, map: \"fk_class_schedule_timeslot\")\n  teachers_responsibility teachers_responsibility[]\n\n  @@index([GradeID], map: \"class_schedule_GradeID_idx\")\n  @@index([RoomID], map: \"class_schedule_RoomID_idx\")\n  @@index([SubjectCode], map: \"class_schedule_SubjectCode_idx\")\n  @@index([TimeslotID], map: \"class_schedule_TimeslotID_idx\")\n  // Performance indexes for conflict detection\n  @@index([TimeslotID, GradeID], map: \"class_schedule_timeslot_grade_idx\")\n  @@index([TimeslotID, RoomID], map: \"class_schedule_timeslot_room_idx\")\n  @@index([GradeID, IsLocked], map: \"class_schedule_grade_locked_idx\")\n}\n\nmodel gradelevel {\n  GradeID                 String                    @id\n  Year                    Int\n  Number                  Int\n  class_schedule          class_schedule[]\n  teachers_responsibility teachers_responsibility[]\n  program                 program[]\n}\n\nmodel room {\n  RoomID         Int              @id @default(autoincrement())\n  RoomName       String           @unique\n  Building       String           @default(\"-\")\n  Floor          String           @default(\"-\")\n  class_schedule class_schedule[]\n}\n\nmodel subject {\n  SubjectCode             String                    @id\n  SubjectName             String\n  Credit                  subject_credit\n  Category                String                    @default(\"-\")\n  ProgramID               Int?\n  class_schedule          class_schedule[]\n  program                 program?                  @relation(fields: [ProgramID], references: [ProgramID], map: \"fk_subject_program\")\n  teachers_responsibility teachers_responsibility[]\n\n  @@index([ProgramID], map: \"subject_ProgramID_idx\")\n}\n\nmodel program {\n  ProgramID   Int          @id @default(autoincrement())\n  ProgramName String       @unique\n  Semester    semester\n  subject     subject[]\n  gradelevel  gradelevel[]\n}\n\nmodel teacher {\n  TeacherID               Int                       @id @default(autoincrement())\n  Prefix                  String\n  Firstname               String\n  Lastname                String\n  Department              String                    @default(\"-\")\n  Email                   String                    @unique\n  Role                    String                    @default(\"teacher\")\n  teachers_responsibility teachers_responsibility[]\n}\n\nmodel timeslot {\n  TimeslotID     String           @id\n  AcademicYear   Int\n  Semester       semester\n  StartTime      DateTime         @db.Time(0)\n  EndTime        DateTime         @db.Time(0)\n  Breaktime      breaktime\n  DayOfWeek      day_of_week\n  class_schedule class_schedule[]\n\n  // Performance index for finding timeslots by term and day\n  @@index([AcademicYear, Semester, DayOfWeek], map: \"timeslot_term_day_idx\")\n}\n\nmodel teachers_responsibility {\n  RespID         Int              @id @default(autoincrement())\n  TeacherID      Int\n  GradeID        String\n  SubjectCode    String\n  AcademicYear   Int\n  Semester       semester\n  TeachHour      Int\n  gradelevel     gradelevel       @relation(fields: [GradeID], references: [GradeID], onDelete: Cascade, map: \"fk_teachers_responsibility_grade\")\n  subject        subject          @relation(fields: [SubjectCode], references: [SubjectCode], onDelete: Cascade, map: \"fk_teachers_responsibility_subject\")\n  teacher        teacher          @relation(fields: [TeacherID], references: [TeacherID], onDelete: Cascade, map: \"fk_teachers_responsibility_teacher\")\n  class_schedule class_schedule[]\n\n  @@index([TeacherID], map: \"teachers_responsibility_TeacherID_idx\")\n  @@index([GradeID], map: \"teachers_responsibility_GradeID_idx\")\n  @@index([SubjectCode], map: \"teachers_responsibility_SubjectCode_idx\")\n  // Performance indexes for finding teacher assignments\n  @@index([TeacherID, AcademicYear, Semester], map: \"teachers_responsibility_teacher_term_idx\")\n  @@index([GradeID, SubjectCode, AcademicYear, Semester], map: \"teachers_responsibility_grade_subject_term_idx\")\n}\n\nmodel table_config {\n  ConfigID     String   @id\n  AcademicYear Int\n  Semester     semester\n  Config       Json\n}\n\nenum day_of_week {\n  MON\n  TUE\n  WED\n  THU\n  FRI\n  SAT\n  SUN\n}\n\nenum subject_credit {\n  CREDIT_05\n  CREDIT_10\n  CREDIT_15\n  CREDIT_20\n}\n\nenum semester {\n  SEMESTER_1\n  SEMESTER_2\n}\n\nenum breaktime {\n  BREAK_JUNIOR\n  BREAK_SENIOR\n  BREAK_BOTH\n  NOT_BREAK\n}\n",
  "inlineSchemaHash": "0ffa37b6fc6b80cf0c01b7ee93ece7324c5171842a04214a3c59405d04ec3266",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"class_schedule\":{\"fields\":[{\"name\":\"ClassID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"TimeslotID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"SubjectCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"RoomID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"GradeID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"IsLocked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"gradelevel\",\"kind\":\"object\",\"type\":\"gradelevel\",\"relationName\":\"class_scheduleTogradelevel\"},{\"name\":\"room\",\"kind\":\"object\",\"type\":\"room\",\"relationName\":\"class_scheduleToroom\"},{\"name\":\"subject\",\"kind\":\"object\",\"type\":\"subject\",\"relationName\":\"class_scheduleTosubject\"},{\"name\":\"timeslot\",\"kind\":\"object\",\"type\":\"timeslot\",\"relationName\":\"class_scheduleTotimeslot\"},{\"name\":\"teachers_responsibility\",\"kind\":\"object\",\"type\":\"teachers_responsibility\",\"relationName\":\"class_scheduleToteachers_responsibility\"}],\"dbName\":null},\"gradelevel\":{\"fields\":[{\"name\":\"GradeID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Year\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"Number\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"class_schedule\",\"kind\":\"object\",\"type\":\"class_schedule\",\"relationName\":\"class_scheduleTogradelevel\"},{\"name\":\"teachers_responsibility\",\"kind\":\"object\",\"type\":\"teachers_responsibility\",\"relationName\":\"gradelevelToteachers_responsibility\"},{\"name\":\"program\",\"kind\":\"object\",\"type\":\"program\",\"relationName\":\"gradelevelToprogram\"}],\"dbName\":null},\"room\":{\"fields\":[{\"name\":\"RoomID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"RoomName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Building\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Floor\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"class_schedule\",\"kind\":\"object\",\"type\":\"class_schedule\",\"relationName\":\"class_scheduleToroom\"}],\"dbName\":null},\"subject\":{\"fields\":[{\"name\":\"SubjectCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"SubjectName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Credit\",\"kind\":\"enum\",\"type\":\"subject_credit\"},{\"name\":\"Category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ProgramID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"class_schedule\",\"kind\":\"object\",\"type\":\"class_schedule\",\"relationName\":\"class_scheduleTosubject\"},{\"name\":\"program\",\"kind\":\"object\",\"type\":\"program\",\"relationName\":\"programTosubject\"},{\"name\":\"teachers_responsibility\",\"kind\":\"object\",\"type\":\"teachers_responsibility\",\"relationName\":\"subjectToteachers_responsibility\"}],\"dbName\":null},\"program\":{\"fields\":[{\"name\":\"ProgramID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"ProgramName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Semester\",\"kind\":\"enum\",\"type\":\"semester\"},{\"name\":\"subject\",\"kind\":\"object\",\"type\":\"subject\",\"relationName\":\"programTosubject\"},{\"name\":\"gradelevel\",\"kind\":\"object\",\"type\":\"gradelevel\",\"relationName\":\"gradelevelToprogram\"}],\"dbName\":null},\"teacher\":{\"fields\":[{\"name\":\"TeacherID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"Prefix\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Firstname\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Lastname\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Department\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"Role\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teachers_responsibility\",\"kind\":\"object\",\"type\":\"teachers_responsibility\",\"relationName\":\"teacherToteachers_responsibility\"}],\"dbName\":null},\"timeslot\":{\"fields\":[{\"name\":\"TimeslotID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"AcademicYear\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"Semester\",\"kind\":\"enum\",\"type\":\"semester\"},{\"name\":\"StartTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"EndTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Breaktime\",\"kind\":\"enum\",\"type\":\"breaktime\"},{\"name\":\"DayOfWeek\",\"kind\":\"enum\",\"type\":\"day_of_week\"},{\"name\":\"class_schedule\",\"kind\":\"object\",\"type\":\"class_schedule\",\"relationName\":\"class_scheduleTotimeslot\"}],\"dbName\":null},\"teachers_responsibility\":{\"fields\":[{\"name\":\"RespID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"TeacherID\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"GradeID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"SubjectCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"AcademicYear\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"Semester\",\"kind\":\"enum\",\"type\":\"semester\"},{\"name\":\"TeachHour\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"gradelevel\",\"kind\":\"object\",\"type\":\"gradelevel\",\"relationName\":\"gradelevelToteachers_responsibility\"},{\"name\":\"subject\",\"kind\":\"object\",\"type\":\"subject\",\"relationName\":\"subjectToteachers_responsibility\"},{\"name\":\"teacher\",\"kind\":\"object\",\"type\":\"teacher\",\"relationName\":\"teacherToteachers_responsibility\"},{\"name\":\"class_schedule\",\"kind\":\"object\",\"type\":\"class_schedule\",\"relationName\":\"class_scheduleToteachers_responsibility\"}],\"dbName\":null},\"table_config\":{\"fields\":[{\"name\":\"ConfigID\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"AcademicYear\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"Semester\",\"kind\":\"enum\",\"type\":\"semester\"},{\"name\":\"Config\",\"kind\":\"scalar\",\"type\":\"Json\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

